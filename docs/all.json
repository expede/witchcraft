{"shell":true,"revision":"37c2a688cfbf88da92122c61c8ec87a89918e35c","objects":[{"type":null,"source":"lib/witchcraft.ex:2","object_type":"ModuleObject","moduledoc":"Top level module\n\n## Hierarchy\n\n    Semigroupoid  Semigroup  Setoid   Foldable   Functor -----------┐\n         ↓           ↓         ↓         ↓     ↙   ↓   ↘           |\n      Category     Monoid     Ord    Traversable  Apply  Bifunctor  |\n         ↓                                       ↙    ↘             ↓\n       Arrow                            Applicative   Chain       Extend\n                                                 ↘    ↙             ↓\n                                                 Monad           Comonad\n\n## `use Wicthcraft`\n\nThere is a convenient `use` macro to import *all* functions in the library.\n\n    use Witchcraft\n\nThis recursively calls `use` on all children modules.\n\nAny options passed to `use` will be passed down to all dependencies.\n\n    use Witchcraft, execpt: [right_fold: 2]\n\nIf you would like to not override the functions and operators from `Kernel`,\nyou can pass the special option `override_kernel: false`.\n\n    use Witchcraft, override_kernel: false\n\nThis same style of `use` is also available on all submodules, and follow\nthe dependency chart (above).\n","module":"Elixir.Witchcraft","id":"Witchcraft"},{"type":null,"source":"lib/witchcraft/applicative.ex:4","object_type":"ModuleObject","moduledoc":"`Applicative` extends `Apply` with the ability to lift value into a\nparticular data type or \"context\".\n\nThis fills in the connection between regular function application and `Apply`\n\n               data --------------- function ---------------> result\n                 |                      |                       |\n     of(Container, data)    of(Container, function) of(Container, result)\n                 ↓                      ↓                       ↓\n    %Container<data> --- %Container<function> ---> %Container<result>\n\n## Type Class\n\nAn instance of `Witchcraft.Applicative` must also implement `Witchcraft.Apply`,\nand define `Witchcraft.Applicative.of/2`.\n\n       Functor    [map/2]\n          ↓\n        Apply     [convey/2]\n          ↓\n     Applicative  [of/2]\n","module":"Elixir.Witchcraft.Applicative","id":"Witchcraft.Applicative"},{"type":"protocol","source":"lib/witchcraft/applicative.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Applicative` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Applicative`\n","module":"Elixir.Witchcraft.Applicative.Proto","id":"Witchcraft.Applicative.Proto"},{"type":"impl","source":"lib/witchcraft/applicative.ex:201","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Applicative.Proto.Function","id":"Witchcraft.Applicative.Proto.Function"},{"type":"impl","source":"lib/witchcraft/applicative.ex:205","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Applicative.Proto.List","id":"Witchcraft.Applicative.Proto.List"},{"type":"impl","source":"lib/witchcraft/applicative.ex:209","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Applicative.Proto.Tuple","id":"Witchcraft.Applicative.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/apply.ex:4","object_type":"ModuleObject","moduledoc":"An extension of `Witchcraft.Functor`, `Apply` provides a way to _apply_ arguments\nto functions when both are wrapped in the same kind of container. This can be\nseen as running function application \"in a context\".\n\nFor a nice, illustrated introduction,\nsee [Functors, Applicatives, And Monads In Pictures](http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html).\n\n## Graphically\n\nIf function application looks like like\n\n    data |> function == result\n\nand a functor looks like this\n\n    %Container<data> ~> function == %Container<result>\n\nthen an apply looks like\n\n    %Container<data> ~>> %Container<function> == %Container<result>\n\nwhich is similar to function application inside containers, plus the ability to\nattach special effects to applications.\n\n               data --------------- function ---------------> result\n    %Container<data> --- %Container<function> ---> %Container<result>\n\nThis lets us do functorial things like\n\n* continue applying values to a curried function resulting from a `Witchcraft.Functor.lift/2`\n* apply multiple functions to multiple arguments (with lists)\n* propogate some state (like [`Nothing`](https://hexdocs.pm/algae/Algae.Maybe.Nothing.html#content)\nin [`Algae.Maybe`](https://hexdocs.pm/algae/Algae.Maybe.html#content))\n\nbut now with a much larger number of arguments, reuse partially applied functions,\nand run effects with the function container as well as the data container.\n\n## Examples\n\n    iex> ap([fn x -> x + 1 end, fn y -> y * 10 end], [1, 2, 3])\n    [2, 3, 4, 10, 20, 30]\n\n    iex> [100, 200]\n    ...> |> Witchcraft.Functor.lift(fn(x, y, z) -> x * y / z end)\n    ...> |> provide([5, 2])\n    ...> |> provide([100, 50])\n    [5.0, 10.0, 2.0, 4.0, 10.0, 20.0, 4.0, 8.0]\n    # ↓                          ↓\n    # 100 * 5 / 100          200 * 5 / 50\n\n    iex> import Witchcraft.Functor\n    ...>\n    ...> [100, 200]\n    ...> ~> fn(x, y, z) ->\n    ...>   x * y / z\n    ...> end <<~ [5, 2]\n    ...>     <<~ [100, 50]\n    [5.0, 10.0, 2.0, 4.0, 10.0, 20.0, 4.0, 8.0]\n    # ↓                          ↓\n    # 100 * 5 / 100          200 * 5 / 50\n\n    %Algae.Maybe.Just{just: 42}\n    ~> fn(x, y, z) ->\n      x * y / z\n    end <<~ %Algae.Maybe.Nothing{}\n        <<~ %Algae.Maybe.Just{just: 99}\n    #=> %Algae.Maybe.Nothing{}\n\n## `convey` vs `ap`\n\nPurely for consistency. In Elixir, we like to conceptually think of a \"subject\"\nbeing piped through a series of transformations. This places the function argument\nas the second argument. In `Witchcraft.Functor`, this was of little consequence.\nHowever, in `Apply`, we're essentially running superpowered function application.\n`ap` is short for `apply`, as to not conflict with `Kernel.apply/2`, and is meant\nto respect a similar API, with the function as the first argument. This also reads\nnicely when piped, as it becomes `[funs] |> ap([args1]) |> ap([args2])`,\nwhich is similar in structure to `fun.(arg2).(arg1)`.\n\nWith potentially multiple functions being applied over potentially\nmany arguments, we need to worry about ordering. `convey` not only flips\nthe order of arguments, but also who is in control of ordering.\n`convey` typically runs each function over all arguments (`first_fun ⬸ all_args`),\nand `ap` runs all functions for each element (`first_arg ⬸ all_funs`).\nThis may change the order of results, and is a feature, not a bug.\n\n    iex> [1, 2, 3]\n    ...> |> convey([&(&1 + 1), &(&1 * 10)])\n    [\n      2, 10, # [(1 + 1), (1 * 10)]\n      3, 20, # [(2 + 1), (2 * 10)]\n      4, 30  # [(3 + 1), (3 * 10)]\n    ]\n\n    iex> [&(&1 + 1), &(&1 * 10)]\n    ...> |> ap([1, 2, 3])\n    [\n      2,  3,  4, # [(1 + 1),  (2 + 1),  (3 + 1)]\n      10, 20, 30 # [(1 * 10), (2 * 10), (3 * 10)]\n    ]\n\n## Type Class\n\nAn instance of `Witchcraft.Apply` must also implement `Witchcraft.Functor`,\nand define `Witchcraft.Apply.convey/2`.\n\n    Functor  [map/2]\n       ↓\n     Apply   [convey/2]\n","module":"Elixir.Witchcraft.Apply","id":"Witchcraft.Apply"},{"type":"protocol","source":"lib/witchcraft/apply.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Apply` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Apply`\n","module":"Elixir.Witchcraft.Apply.Proto","id":"Witchcraft.Apply.Proto"},{"type":"impl","source":"lib/witchcraft/apply.ex:436","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Apply.Proto.Function","id":"Witchcraft.Apply.Proto.Function"},{"type":"impl","source":"lib/witchcraft/apply.ex:441","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Apply.Proto.List","id":"Witchcraft.Apply.Proto.List"},{"type":"impl","source":"lib/witchcraft/apply.ex:450","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Apply.Proto.Tuple","id":"Witchcraft.Apply.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/arrow.ex:4","object_type":"ModuleObject","moduledoc":"Arrows abstract the idea of computations, potentially with a context.\n\nArrows are in fact an abstraction above monads, and can be used both to\nexpress all other type classes in Witchcraft. They also enable some nice\nflow-based reasoning about computation.\n\nFor a nice illustrated explination,\nsee [Haskell/Understanding arrows](https://en.wikibooks.org/wiki/Haskell/Understanding_arrows)\n\nArrows let you think diagrammatically, and is a powerful way of thinking\nabout flow programming, concurrency, and more.\n\n                 ┌---> f --------------------------┐\n                 |                                 v\n    input ---> split                            unsplit ---> result\n                 |                                 ^\n                 |              ┌--- h ---┐        |\n                 |              |         v        |\n                 └---> g ---> split     unsplit ---┘\n                                |         ^\n                                └--- i ---┘\n\n## Type Class\n\nAn instance of `Witchcraft.Arrow` must also implement `Witchcraft.Category`,\nand define `Witchcraft.Arrow.arrowize/2`.\n\n    Semigroupoid  [compose/2]\n        ↓\n     Category     [identity/1]\n        ↓\n      Arrow       [arrowize/2]\n\n","module":"Elixir.Witchcraft.Arrow","id":"Witchcraft.Arrow"},{"type":"protocol","source":"lib/witchcraft/arrow.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Arrow` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Arrow`\n","module":"Elixir.Witchcraft.Arrow.Proto","id":"Witchcraft.Arrow.Proto"},{"type":"impl","source":"lib/witchcraft/arrow.ex:460","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Arrow.Proto.Function","id":"Witchcraft.Arrow.Proto.Function"},{"type":null,"source":"lib/witchcraft/bifunctor.ex:4","object_type":"ModuleObject","moduledoc":"Similar to `Witchcraft.Functor`, but able to map two functions over two\nseparate portions of some data structure (some product type).\n\nEspecially helpful when you need different hebaviours on different fields.\n\n## Type Class\n\nAn instance of `Witchcraft.Bifunctor` must also implement `Witchcraft.Functor`,\nand define `Witchcraft.Apply.ap/2`.\n\n     Functor   [map/2]\n        ↓\n    Bifunctor  [bimap/2]\n\n","module":"Elixir.Witchcraft.Bifunctor","id":"Witchcraft.Bifunctor"},{"type":"protocol","source":"lib/witchcraft/bifunctor.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Bifunctor` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Bifunctor`\n","module":"Elixir.Witchcraft.Bifunctor.Proto","id":"Witchcraft.Bifunctor.Proto"},{"type":"impl","source":"lib/witchcraft/bifunctor.ex:157","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Bifunctor.Proto.Tuple","id":"Witchcraft.Bifunctor.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/category.ex:4","object_type":"ModuleObject","moduledoc":"A category is some collection of objects and relationships (morphisms) between them.\n\nThis idea is captured by the idea of an identity function for objects,\nand the ability to compose relationships between objects. In most cases,\nthese are very straightforward and composition and identity are the standard\nfunctions from the `Quark` package or similar.\n\n## Type Class\n\nAn instance of `Witchcraft.Category` must also implement `Witchcraft.Semigroupoid`,\nand define `Witchcraft.Category.identity/1`.\n\n    Semigroupoid  [compose/2]\n        ↓\n     Category     [identity/1]\n","module":"Elixir.Witchcraft.Category","id":"Witchcraft.Category"},{"type":"protocol","source":"lib/witchcraft/category.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Category` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Category`\n","module":"Elixir.Witchcraft.Category.Proto","id":"Witchcraft.Category.Proto"},{"type":"impl","source":"lib/witchcraft/category.ex:70","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Category.Proto.Function","id":"Witchcraft.Category.Proto.Function"},{"type":null,"source":"lib/witchcraft/chain.ex:4","object_type":"ModuleObject","moduledoc":"Chain function applications on contained data that may have some additional effect\n\nAs a diagram:\n\n    %Container<data> --- (data -> %Container<updated_data>) ---> %Container<updated_data>\n\n## Examples\n\n    iex> chain([1, 2, 3], fn x -> [x, x] end)\n    [1, 1, 2, 2, 3, 3]\n\n    alias Algae.Maybe.{Nothing, Just}\n\n    %Just{just: 42} >>> fn x -> %Just{just: x + 1} end\n    #=> %Just{just: 43}\n\n    %Just{just: 42}\n    >>> fn x -> if x > 50, do: %Just{just: x + 1}, else: %Nothing{} end\n    >>> fn y -> y * 100 end\n    #=> %Nothing{}\n\n## Type Class\n\nAn instance of `Witchcraft.Chain` must also implement `Witchcraft.Apply`,\nand define `Witchcraft.Chain.chain/2`.\n\n    Functor  [map/2]\n       ↓\n     Apply   [convey/2]\n       ↓\n     Chain   [chain/2]\n","module":"Elixir.Witchcraft.Chain","id":"Witchcraft.Chain"},{"type":"protocol","source":"lib/witchcraft/chain.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Chain` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Chain`\n","module":"Elixir.Witchcraft.Chain.Proto","id":"Witchcraft.Chain.Proto"},{"type":"impl","source":"lib/witchcraft/chain.ex:449","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Chain.Proto.Function","id":"Witchcraft.Chain.Proto.Function"},{"type":"impl","source":"lib/witchcraft/chain.ex:457","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Chain.Proto.List","id":"Witchcraft.Chain.Proto.List"},{"type":"impl","source":"lib/witchcraft/chain.ex:465","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Chain.Proto.Tuple","id":"Witchcraft.Chain.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/comonad.ex:4","object_type":"ModuleObject","moduledoc":"The dual of monads, `Comonad` brings an unwrapping function to `Extend`able data.\n\nNote that the unwrapping function (`extract`) *must return a value*, and is not\navailable on many data structres that have an empty element. For example,\nthere is no `Comonad` instance for `List` because we cannot pull a value\nout of `[]`.\n\n## Type Class\n\nAn instance of `Witchcraft.Comonad` must also implement `Witchcraft.Extend`,\nand define `Witchcraft.Comonad.extract/1`.\n\n    Functor  [map/2]\n       ↓\n    Extend   [nest/1]\n       ↓\n    Comonad  [extract/1]\n","module":"Elixir.Witchcraft.Comonad","id":"Witchcraft.Comonad"},{"type":"protocol","source":"lib/witchcraft/comonad.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Comonad` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Comonad`\n","module":"Elixir.Witchcraft.Comonad.Proto","id":"Witchcraft.Comonad.Proto"},{"type":"impl","source":"lib/witchcraft/comonad.ex:96","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Comonad.Proto.Tuple","id":"Witchcraft.Comonad.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/extend.ex:4","object_type":"ModuleObject","moduledoc":"`Extend` is essentially \"co`Chain`\", meaning that it reverses the relationships\nin `Chain`.\n\nInstead of a flattening operation, we have `nest` which wraps the data in\nan additional layer of itsef.\n\nInstead of a `chain`ing function that acts on raw data and wraps it,\nwe have `extend` which unwraps data, may modify it, and returns the unwrapped value\n\n## Type Class\n\nAn instance of `Witchcraft.Extend` must also implement `Witchcraft.Functor`,\nand define `Witchcraft.Extend.nest/1`.\n\n    Functor  [map/2]\n       ↓\n    Extend   [nest/1]\n\n","module":"Elixir.Witchcraft.Extend","id":"Witchcraft.Extend"},{"type":"protocol","source":"lib/witchcraft/extend.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Extend` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Extend`\n","module":"Elixir.Witchcraft.Extend.Proto","id":"Witchcraft.Extend.Proto"},{"type":"impl","source":"lib/witchcraft/extend.ex:315","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Extend.Proto.Function","id":"Witchcraft.Extend.Proto.Function"},{"type":"impl","source":"lib/witchcraft/extend.ex:329","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Extend.Proto.List","id":"Witchcraft.Extend.Proto.List"},{"type":"impl","source":"lib/witchcraft/extend.ex:334","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Extend.Proto.Tuple","id":"Witchcraft.Extend.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/foldable.ex:4","object_type":"ModuleObject","moduledoc":"Data that can be folded over to change its structure by altering or combining elements\n\n## Examples\n\n    iex> right_fold([1, 2, 3], 0, &+/2) # sum\n    6\n\n## Properties\n\nPeople are working on Foldable properties. This is one of the exceptions to\nthere needing to conform to properties. In the meantime, we are testing that\nnaturality is preserved, which is be a free theorm.\n\nIf that fails, something is very wrong with the instance.\n\n## Type Class\n\nAn instance of `Witchcraft.Foldable` define `Witchcraft.Foldable.right_fold/3`.\n\n    Foldable   [right_fold/3]\n","module":"Elixir.Witchcraft.Foldable","id":"Witchcraft.Foldable"},{"type":"exception","source":"lib/witchcraft/foldable/empty_error.ex:2","object_type":"ModuleObject","moduledoc":"Represent the error state of trying to fold over an empty structure\n\n## Examples\n\n    iex> %Witchcraft.Foldable.EmptyError{}\n    %Witchcraft.Foldable.EmptyError{\n      message: \"Unable to process empty data\",\n      plug_status: 500\n    }\n\n","module":"Elixir.Witchcraft.Foldable.EmptyError","id":"Witchcraft.Foldable.EmptyError"},{"type":"protocol","source":"lib/witchcraft/foldable.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Foldable` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Foldable`\n","module":"Elixir.Witchcraft.Foldable.Proto","id":"Witchcraft.Foldable.Proto"},{"type":"impl","source":"lib/witchcraft/foldable/bitstring.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Foldable.Proto.BitString","id":"Witchcraft.Foldable.Proto.BitString"},{"type":"impl","source":"lib/witchcraft/foldable/list.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Foldable.Proto.List","id":"Witchcraft.Foldable.Proto.List"},{"type":"impl","source":"lib/witchcraft/foldable/map.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Foldable.Proto.Map","id":"Witchcraft.Foldable.Proto.Map"},{"type":"impl","source":"lib/witchcraft/foldable/tuple.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Foldable.Proto.Tuple","id":"Witchcraft.Foldable.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/functor.ex:4","object_type":"ModuleObject","moduledoc":"Functors are datatypes that allow the application of functions to their interior values.\nAlways returns data in the same structure (same size, tree layout, and so on).\n\nPlease note that bitstrings are not functors, as they fail the\nfunctor composition constraint. They change the structure of the underlying data,\nand thus composed lifting does not equal lifing a composed function. If you\nneed to map over a bitstring, convert it to and from a charlist.\n\n## Type Class\n\nAn instance of `Witchcraft.Functor` must define `Witchcraft.Functor.map/2`.\n\n    Functor  [map/2]\n","module":"Elixir.Witchcraft.Functor","id":"Witchcraft.Functor"},{"type":"protocol","source":"lib/witchcraft/functor.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Functor` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Functor`\n","module":"Elixir.Witchcraft.Functor.Proto","id":"Witchcraft.Functor.Proto"},{"type":"impl","source":"lib/witchcraft/functor.ex:278","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Functor.Proto.Function","id":"Witchcraft.Functor.Proto.Function"},{"type":"impl","source":"lib/witchcraft/functor.ex:294","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Functor.Proto.List","id":"Witchcraft.Functor.Proto.List"},{"type":"impl","source":"lib/witchcraft/functor.ex:332","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Functor.Proto.Map","id":"Witchcraft.Functor.Proto.Map"},{"type":"impl","source":"lib/witchcraft/functor.ex:298","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Functor.Proto.Tuple","id":"Witchcraft.Functor.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/monad.ex:4","object_type":"ModuleObject","moduledoc":"Very similar to `Chain`, `Monad` provides a way to link actions, and a way\nto bring plain values into the correct context (`Applicative`).\n\nThis allows us to view actions in a full framework along the lines of\nfunctor and applicative:\n\n               data ---------------- function ----------------------------> result\n                 |                      |                                     |\n     of(Container, data)          of/2, or similar                of(Container, result)\n                 ↓                      ↓                                     ↓\n    %Container<data> --- (data -> %Container<updated_data>) ---> %Container<updated_data>\n\nAs you can see, the linking function may just be `of` now that we have that.\n\nFor a nice, illustrated introduction,\nsee [Functors, Applicatives, And Monads In Pictures](http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html).\n\nHaving `of` also lets us enhance do-notation with a convenuenct `return` function (see `monad/2`)\n\n## Type Class\n\nAn instance of `Witchcraft.Monad` must also implement `Witchcraft.Applicative`\nand `Wicthcraft.Chainable`.\n\n                     Functor     [map/2]\n                        ↓\n                      Apply      [convey/2]\n                      ↓   ↓\n    [of/2]  Applicative   Chain  [chain/2]\n                      ↓   ↓\n                      Monad\n                       [_]\n","module":"Elixir.Witchcraft.Monad","id":"Witchcraft.Monad"},{"type":"protocol","source":"lib/witchcraft/monad.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Monad` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Monad`\n","module":"Elixir.Witchcraft.Monad.Proto","id":"Witchcraft.Monad.Proto"},{"type":"impl","source":"lib/witchcraft/monad.ex:141","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monad.Proto.Function","id":"Witchcraft.Monad.Proto.Function"},{"type":"impl","source":"lib/witchcraft/monad.ex:142","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monad.Proto.List","id":"Witchcraft.Monad.Proto.List"},{"type":"impl","source":"lib/witchcraft/monad.ex:144","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monad.Proto.Tuple","id":"Witchcraft.Monad.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/monoid.ex:4","object_type":"ModuleObject","moduledoc":"Monoid extends the semigroup with the concept of an \"empty\" or \"zero\" element.\n\n## Type Class\n\nAn instance of `Witchcraft.Monoid` must also implement `Witchcraft.Semigroup`,\nand define `Witchcraft.Monoid.empty/1`.\n\n    Semigroup  [append/2]\n        ↓\n     Monoid    [empty/1]\n","module":"Elixir.Witchcraft.Monoid","id":"Witchcraft.Monoid"},{"type":"protocol","source":"lib/witchcraft/monoid.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Monoid` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Monoid`\n","module":"Elixir.Witchcraft.Monoid.Proto","id":"Witchcraft.Monoid.Proto"},{"type":"impl","source":"lib/witchcraft/monoid.ex:97","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monoid.Proto.BitString","id":"Witchcraft.Monoid.Proto.BitString"},{"type":"impl","source":"lib/witchcraft/monoid.ex:93","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monoid.Proto.Float","id":"Witchcraft.Monoid.Proto.Float"},{"type":"impl","source":"lib/witchcraft/monoid.ex:85","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monoid.Proto.Function","id":"Witchcraft.Monoid.Proto.Function"},{"type":"impl","source":"lib/witchcraft/monoid.ex:89","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monoid.Proto.Integer","id":"Witchcraft.Monoid.Proto.Integer"},{"type":"impl","source":"lib/witchcraft/monoid.ex:101","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monoid.Proto.List","id":"Witchcraft.Monoid.Proto.List"},{"type":"impl","source":"lib/witchcraft/monoid.ex:105","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monoid.Proto.Map","id":"Witchcraft.Monoid.Proto.Map"},{"type":"impl","source":"lib/witchcraft/monoid.ex:109","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Monoid.Proto.Tuple","id":"Witchcraft.Monoid.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/ord.ex:4","object_type":"ModuleObject","moduledoc":"`Ord` describes how to order elements of a data type\n\nThis is a total order, so all elements are either `:equal`, `:greater`, or `:lesser`\nthan each other.\n\n## Type Class\n\nAn instance of `Witchcraft.Ord` must also implement `Witchcraft.Setoid`,\nand define `Witchcraft.Ord.compare/2`.\n\n    Setoid  [equivalent?/2]\n      ↓\n     Ord    [compare/2]\n","module":"Elixir.Witchcraft.Ord","id":"Witchcraft.Ord"},{"type":"protocol","source":"lib/witchcraft/ord.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Ord` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Ord`\n","module":"Elixir.Witchcraft.Ord.Proto","id":"Witchcraft.Ord.Proto"},{"type":"impl","source":"lib/witchcraft/ord/string.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Ord.Proto.BitString","id":"Witchcraft.Ord.Proto.BitString"},{"type":"impl","source":"lib/witchcraft/ord/float.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Ord.Proto.Float","id":"Witchcraft.Ord.Proto.Float"},{"type":"impl","source":"lib/witchcraft/ord/integer.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Ord.Proto.Integer","id":"Witchcraft.Ord.Proto.Integer"},{"type":"impl","source":"lib/witchcraft/ord/list.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Ord.Proto.List","id":"Witchcraft.Ord.Proto.List"},{"type":"impl","source":"lib/witchcraft/ord/map.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Ord.Proto.Map","id":"Witchcraft.Ord.Proto.Map"},{"type":"impl","source":"lib/witchcraft/ord/tuple.ex:3","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Ord.Proto.Tuple","id":"Witchcraft.Ord.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/semigroup.ex:4","object_type":"ModuleObject","moduledoc":"A semigroup is a structure describing data that can be appendenated with others of its type.\nThat is to say that appending another list returns a list, appending one map\nto another returns a map, and appending two integers returns an integer, and so on.\n\nThese can be chained together an arbitrary number of times. For example:\n\n    1 <> 2 <> 3 <> 5 <> 7 == 18\n    [1, 2, 3] <> [4, 5, 6] <> [7, 8, 9] == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"foo\" <> \" \" <> \"bar\" == \"foo bar\"\n\nThis generalizes the idea of a monoid, as it does not require an `empty` version.\n\n## Type Class\n\nAn instance of `Witchcraft.Semigroup` must define `Witchcraft.Semigroup.append/2`.\n\n    Semigroup  [append/2]\n","module":"Elixir.Witchcraft.Semigroup","id":"Witchcraft.Semigroup"},{"type":"protocol","source":"lib/witchcraft/semigroup.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Semigroup` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Semigroup`\n","module":"Elixir.Witchcraft.Semigroup.Proto","id":"Witchcraft.Semigroup.Proto"},{"type":"impl","source":"lib/witchcraft/semigroup.ex:147","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Semigroup.Proto.BitString","id":"Witchcraft.Semigroup.Proto.BitString"},{"type":"impl","source":"lib/witchcraft/semigroup.ex:143","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Semigroup.Proto.Float","id":"Witchcraft.Semigroup.Proto.Float"},{"type":"impl","source":"lib/witchcraft/semigroup.ex:135","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Semigroup.Proto.Function","id":"Witchcraft.Semigroup.Proto.Function"},{"type":"impl","source":"lib/witchcraft/semigroup.ex:139","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Semigroup.Proto.Integer","id":"Witchcraft.Semigroup.Proto.Integer"},{"type":"impl","source":"lib/witchcraft/semigroup.ex:151","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Semigroup.Proto.List","id":"Witchcraft.Semigroup.Proto.List"},{"type":"impl","source":"lib/witchcraft/semigroup.ex:155","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Semigroup.Proto.Map","id":"Witchcraft.Semigroup.Proto.Map"},{"type":"impl","source":"lib/witchcraft/semigroup.ex:159","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Semigroup.Proto.Tuple","id":"Witchcraft.Semigroup.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/semigroupoid.ex:4","object_type":"ModuleObject","moduledoc":"A semigroupoid describes some way of composing morphisms on between some\ncollection of objects.\n\n## Type Class\n\nAn instance of `Witchcraft.Semigroupoid` must define `Witchcraft.Semigroupoid.compose/2`.\n\n    Semigroupoid  [compose/2]\n","module":"Elixir.Witchcraft.Semigroupoid","id":"Witchcraft.Semigroupoid"},{"type":"protocol","source":"lib/witchcraft/semigroupoid.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Semigroupoid` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Semigroupoid`\n","module":"Elixir.Witchcraft.Semigroupoid.Proto","id":"Witchcraft.Semigroupoid.Proto"},{"type":"impl","source":"lib/witchcraft/semigroupoid.ex:142","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Semigroupoid.Proto.Function","id":"Witchcraft.Semigroupoid.Proto.Function"},{"type":null,"source":"lib/witchcraft/setoid.ex:4","object_type":"ModuleObject","moduledoc":"A setoid is a type with an equivalence relation\n\nThis is most useful when equivalence of some data is not the same as equality.\n\nSince some types have differing concepts of equality, this allows overriding\nthe behaviour from `Kernel.==/2`. To get the Setoid `==` operator override,\nsimply `use Witchcraft.Setoid`.\n\n## Type Class\n\nAn instance of `Witchcraft.Setoid` must define `Witchcraft.Setoid.equivalent?/2`\n\n    Setoid [equivalent?/2]\n","module":"Elixir.Witchcraft.Setoid","id":"Witchcraft.Setoid"},{"type":"protocol","source":"lib/witchcraft/setoid.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Setoid` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Setoid`\n","module":"Elixir.Witchcraft.Setoid.Proto","id":"Witchcraft.Setoid.Proto"},{"type":"impl","source":"lib/witchcraft/setoid.ex:118","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Setoid.Proto.BitString","id":"Witchcraft.Setoid.Proto.BitString"},{"type":"impl","source":"lib/witchcraft/setoid.ex:114","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Setoid.Proto.Float","id":"Witchcraft.Setoid.Proto.Float"},{"type":"impl","source":"lib/witchcraft/setoid.ex:110","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Setoid.Proto.Integer","id":"Witchcraft.Setoid.Proto.Integer"},{"type":"impl","source":"lib/witchcraft/setoid.ex:126","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Setoid.Proto.List","id":"Witchcraft.Setoid.Proto.List"},{"type":"impl","source":"lib/witchcraft/setoid.ex:130","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Setoid.Proto.Map","id":"Witchcraft.Setoid.Proto.Map"},{"type":"impl","source":"lib/witchcraft/setoid.ex:134","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Setoid.Proto.MapSet","id":"Witchcraft.Setoid.Proto.MapSet"},{"type":"impl","source":"lib/witchcraft/setoid.ex:122","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Setoid.Proto.Tuple","id":"Witchcraft.Setoid.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/traversable.ex:4","object_type":"ModuleObject","moduledoc":"Walk through a data structure from left to right,\nrunning some action on each element in turn.\n\nSimilar to applicatives, it can be used to do things like collecting some effect\nwhile performing other actions.\n\n## Type Class\n\nAn instance of `Witchcraft.Traversable` must also implement `Witchcraft.Foldable`\nand `Witchcraft.Functor`, and define `Witchcraft.Foldable.right_fold/3`.\n\n    [right_fold/3]  Foldable    Functor  [map/2]\n                           ↓    ↓\n                         Traversable\n                       [right_fold/3]\n","module":"Elixir.Witchcraft.Traversable","id":"Witchcraft.Traversable"},{"type":"protocol","source":"lib/witchcraft/traversable.ex:3","object_type":"ModuleObject","moduledoc":"Protocol for the `Elixir.Witchcraft.Traversable` type class\n\nFor this type class's API, please refer to `Elixir.Witchcraft.Traversable`\n","module":"Elixir.Witchcraft.Traversable.Proto","id":"Witchcraft.Traversable.Proto"},{"type":"impl","source":"lib/witchcraft/traversable.ex:294","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Traversable.Proto.List","id":"Witchcraft.Traversable.Proto.List"},{"type":"impl","source":"lib/witchcraft/traversable.ex:281","object_type":"ModuleObject","moduledoc":null,"module":"Elixir.Witchcraft.Traversable.Proto.Tuple","id":"Witchcraft.Traversable.Proto.Tuple"},{"type":null,"source":"lib/witchcraft/unit.ex:2","object_type":"ModuleObject","moduledoc":"The `unit` or `Void` type. A stand in for \"no added information here\".\n\nWhy not encode unit as `{}`? Many protocols (Witchcraft and others)\nconvert tuples to lists, and thus will treat unit as `{}` and thus `[]`,\nwhich we don't want. The struct removes this ambiguity.\n","module":"Elixir.Witchcraft.Unit","id":"Witchcraft.Unit"},{"type":"def","source":"lib/witchcraft/applicative.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Applicative","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/applicative.ex:74","signature":[["sample",[],null]],"object_type":"FunctionObject","name":"of","module_id":"Witchcraft.Applicative","id":"of/1","doc":"Partially apply `of/2`, generally as a way to bring many values into the same context.\n\n## Examples\n\n    iex> {\"very example\", \"much wow\"}\n    ...> |> of()\n    ...> |> Witchcraft.Functor.across([42, \"hello\", [1, 2, 3]])\n    [{\"\", 42}, {\"\", \"hello\"}, {\"\", [1, 2, 3]}]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/applicative.ex:41","signature":[["sample",[],null],["to_wrap",[],null]],"object_type":"FunctionObject","name":"of","module_id":"Witchcraft.Applicative","id":"of/2","doc":"Bring a value into the same data type as some sample\n\n## Examples\n\n    iex> of([], 42)\n    [42]\n\n    iex> of([1, 2, 3], 42)\n    [42]\n\n    iex> of({\"a\", \"b\", 155}, 42)\n    {\"\", \"\", 42}\n\n    iex> of(fn -> nil end, 42).(55)\n    42\n\n    iex> of(fn(a, b, c) -> a + b - c end, 42).(55)\n    42\n\n    iex> import Witchcraft.Apply\n    ...>\n    ...> []\n    ...> |> of(&+/2)\n    ...> |> provide([1, 2, 3])\n    ...> |> ap(of([], 42))\n    [43, 44, 45]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/applicative.ex:103","signature":[["sample",[],null],["to_wrap",[],null]],"object_type":"FunctionObject","name":"pure","module_id":"Witchcraft.Applicative","id":"pure/2","doc":"Alias for `of/2`, for cases that this helps legibility or style.\n\n## Example\n\n    iex> pure({\"ohai\", \"thar\"}, 42)\n    {\"\", 42}\n\n    iex> [] |> pure(42)\n    [42]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/applicative.ex:136","signature":[["to_wrap",[],null]],"object_type":"FunctionObject","name":"to","module_id":"Witchcraft.Applicative","id":"to/1","doc":"Prime a value to be brought into other data types\n\n## Example\n\n    iex> make = to(42)\n    ...> make.({\"ohai\", \"thar\"})\n    {\"\", 42}\n    ...> make.([])\n    [42]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/applicative.ex:118","signature":[["to_wrap",[],null],["sample",[],null]],"object_type":"FunctionObject","name":"to","module_id":"Witchcraft.Applicative","id":"to/2","doc":"`of/2` with arguments reversed.\n\n## Example\n\n    iex> to(42, {\"ohai\", \"thar\"})\n    {\"\", 42}\n\n    iex> 42 |> to([])\n    [42]\n\n    42 |> to(%Algae.Id{})\n    #=> %Algae.Id{id: 42}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/applicative.ex:151","signature":[["sample",[],null],["to_wrap",[],null]],"object_type":"FunctionObject","name":"unit","module_id":"Witchcraft.Applicative","id":"unit/2","doc":"Alias for `of/2`, for cases that this helps legibility or style\n\n## Example\n\n    iex> unit({\":)\", \":(\"}, 42)\n    {\"\", 42}\n\n    iex> [] |> unit(42)\n    [42]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/applicative.ex:88","signature":[["sample",[],null],["to_wrap",[],null]],"object_type":"FunctionObject","name":"wrap","module_id":"Witchcraft.Applicative","id":"wrap/2","doc":"Alias for `of/2`, for cases that this helps legibility or style.\n\n## Example\n\n    iex> wrap({\":|\", \"^.~\"}, 42)\n    {\"\", 42}\n\n    iex> [] |> wrap(42)\n    [42]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/applicative.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Applicative.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/applicative.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Applicative.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/applicative.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Applicative.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/applicative.ex:41","signature":[["sample",[],null],["to_wrap",[],null]],"object_type":"FunctionObject","name":"of","module_id":"Witchcraft.Applicative.Proto","id":"of/2","doc":"Bring a value into the same data type as some sample\n\n## Examples\n\n    iex> of([], 42)\n    [42]\n\n    iex> of([1, 2, 3], 42)\n    [42]\n\n    iex> of({\"a\", \"b\", 155}, 42)\n    {\"\", \"\", 42}\n\n    iex> of(fn -> nil end, 42).(55)\n    42\n\n    iex> of(fn(a, b, c) -> a + b - c end, 42).(55)\n    42\n\n    iex> import Witchcraft.Apply\n    ...>\n    ...> []\n    ...> |> of(&+/2)\n    ...> |> provide([1, 2, 3])\n    ...> |> ap(of([], 42))\n    [43, 44, 45]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/applicative.ex:201","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Applicative.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/applicative.ex:201","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Applicative.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/applicative.ex:201","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Applicative.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/applicative.ex:202","signature":[["_",[],"Elixir"],["unwrapped",[],null]],"object_type":"FunctionObject","name":"of","module_id":"Witchcraft.Applicative.Proto.Function","id":"of/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/applicative.ex:205","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Applicative.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/applicative.ex:205","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Applicative.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/applicative.ex:205","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Applicative.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/applicative.ex:206","signature":[["_",[],"Elixir"],["unwrapped",[],null]],"object_type":"FunctionObject","name":"of","module_id":"Witchcraft.Applicative.Proto.List","id":"of/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/applicative.ex:209","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Applicative.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/applicative.ex:209","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Applicative.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/applicative.ex:209","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Applicative.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/applicative.ex:215","signature":[["sample",[],null],["unwrapped",[],null]],"object_type":"FunctionObject","name":"of","module_id":"Witchcraft.Applicative.Proto.Tuple","id":"of/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:225","signature":[["wrapped_funs",[],null],["wrapped",[],null]],"object_type":"FunctionObject","name":"<<~","module_id":"Witchcraft.Apply","id":"<<~/2","doc":"Operator alias for `ap/2`\n\nMoves against the pipe direction, but in the order of normal function application\n\n## Examples\n\n    iex> [fn x -> x + 1 end, fn y -> y * 10 end] <<~ [1, 2, 3]\n    [2, 3, 4, 10, 20, 30]\n\n    iex> import Witchcraft.Functor\n    ...>\n    ...> [100, 200]\n    ...> ~> fn(x, y, z) -> x * y / z\n    ...> end <<~ [5, 2]\n    ...>     <<~ [100, 50]\n    ...> ~> fn x -> x + 1 end\n    [6.0, 11.0, 3.0, 5.0, 11.0, 21.0, 5.0, 9.0]\n\n    iex> import Witchcraft.Functor, only: [<~: 2]\n    ...> fn(a, b, c, d) -> a * b - c + d end <~ [1, 2] <<~ [3, 4] <<~ [5, 6] <<~ [7, 8]\n    [5, 6, 4, 5, 6, 7, 5, 6, 8, 9, 7, 8, 10, 11, 9, 10]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Apply","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/apply.ex:194","signature":[["wrapped_funs",[],null],["wrapped",[],null]],"object_type":"FunctionObject","name":"ap","module_id":"Witchcraft.Apply","id":"ap/2","doc":"Reverse arguments and sequencing of `convey/2`.\n\nConceptually this makes operations happen in\na different order than `convey/2`, with the left-side arguments (functions) being\nrun on all right-side arguments, in that order. We're altering the _sequencing_\nof function applications.\n\n## Examples\n\n    iex> ap([fn x -> x + 1 end, fn y -> y * 10 end], [1, 2, 3])\n    [2, 3, 4, 10, 20, 30]\n\n    # For comparison\n    iex> convey([1, 2, 3], [fn x -> x + 1 end, fn y -> y * 10 end])\n    [2, 10, 3, 20, 4, 30]\n\n    iex> [100, 200]\n    ...> |> Witchcraft.Functor.lift(fn(x, y, z) -> x * y / z end)\n    ...> |> ap([5, 2])\n    ...> |> ap([100, 50])\n    [5.0, 10.0, 2.0, 4.0, 10.0, 20.0, 4.0, 8.0]\n    # ↓                          ↓\n    # 100 * 5 / 100          200 * 5 / 50\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:134","signature":[["wrapped_args",[],null],["wrapped_funs",[],null]],"object_type":"FunctionObject","name":"convey","module_id":"Witchcraft.Apply","id":"convey/2","doc":"Pipe arguments to functions, when both are wrapped in the same\ntype of data structure.\n\n## Examples\n\n    iex> [1, 2, 3]\n    ...> |> convey([fn x -> x + 1 end, fn y -> y * 10 end])\n    [2, 10, 3, 20, 4, 30]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:326","signature":[["wrapped_a",[],null],["wrapped_b",[],null]],"object_type":"FunctionObject","name":"following","module_id":"Witchcraft.Apply","id":"following/2","doc":"Sequence actions, replacing the last argument with the first argument's values\n\nThis is essentially a sequence of actions forgetting the second argument\n\n## Examples\n\n    iex> [1, 2, 3]\n    ...> |> following([3, 4, 5])\n    ...> |> following([5, 6, 7])\n    [\n      1, 1, 1, 1, 1, 1, 1, 1, 1,\n      2, 2, 2, 2, 2, 2, 2, 2, 2,\n      3, 3, 3, 3, 3, 3, 3, 3, 3\n    ]\n\n    iex> {1, 2, 3} |> following({4, 5, 6}) |> following({7, 8, 9})\n    {12, 15, 3}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:170","signature":[["wrapped_args",[],null],["wrapped_funs",[],null]],"object_type":"FunctionObject","name":"hose","module_id":"Witchcraft.Apply","id":"hose/2","doc":"Alias for `convey/2`.\n\nWhy \"hose\"?\n\n* Pipes (`|>`) are application with arguments flipped\n* `ap/2` is like function application \"in a context\"\n* The opposite of `ap` is a contextual pipe\n* `hose`s are a kind of flexible pipe\n\nQ.E.D.\n\n![](http://s2.quickmeme.com/img/fd/fd0baf5ada879021c32129fc7dea679bd7666e708df8ca8ca536da601ea3d29e.jpg)\n\n## Examples\n\n    iex> [1, 2, 3]\n    ...> |> hose([fn x -> x + 1 end, fn y -> y * 10 end])\n    [2, 10, 3, 20, 4, 30]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:349","signature":[["a",[],null],["b",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"lift","module_id":"Witchcraft.Apply","id":"lift/3","doc":"Extends `Functor.lift/2` to apply arguments to a binary function\n\n## Examples\n\n    iex> lift([1, 2], [3, 4], &+/2)\n    [4, 5, 5, 6]\n\n    iex> [1, 2]\n    ...> |> lift([3, 4], &*/2)\n    [3, 6, 4, 8]\n\n","arity":3},{"type":"def","source":"lib/witchcraft/apply.ex:369","signature":[["a",[],null],["b",[],null],["c",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"lift","module_id":"Witchcraft.Apply","id":"lift/4","doc":"Extends `lift` to apply arguments to a ternary function\n\n## Examples\n\n    iex> lift([1, 2], [3, 4], [5, 6], fn(a, b, c) -> a * b - c end)\n    [-2, -3, 1, 0, -1, -2, 3, 2]\n\n","arity":4},{"type":"def","source":"lib/witchcraft/apply.ex:381","signature":[["a",[],null],["b",[],null],["c",[],null],["d",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"lift","module_id":"Witchcraft.Apply","id":"lift/5","doc":"Extends `lift` to apply arguments to a quaternary function\n\n## Examples\n\n    iex> lift([1, 2], [3, 4], [5, 6], [7, 8], fn(a, b, c, d) -> a * b - c + d end)\n    [5, 6, 4, 5, 8, 9, 7, 8, 6, 7, 5, 6, 10, 11, 9, 10]\n\n","arity":5},{"type":"def","source":"lib/witchcraft/apply.ex:393","signature":[["fun",[],null],["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"over","module_id":"Witchcraft.Apply","id":"over/3","doc":"Extends `over` to apply arguments to a binary function\n\n## Examples\n\n    iex> over(&+/2, [1, 2], [3, 4])\n    [4, 5, 5, 6]\n\n    iex> (&*/2)\n    ...> |> over([1, 2], [3, 4])\n    [3, 4, 6, 8]\n\n","arity":3},{"type":"def","source":"lib/witchcraft/apply.ex:409","signature":[["fun",[],null],["a",[],null],["b",[],null],["c",[],null]],"object_type":"FunctionObject","name":"over","module_id":"Witchcraft.Apply","id":"over/4","doc":"Extends `over` to apply arguments to a ternary function\n\n## Examples\n\n    iex> fn(a, b, c) -> a * b - c end\n    iex> |> over([1, 2], [3, 4], [5, 6])\n    [-2, -3, -1, -2, 1, 0, 3, 2]\n\n","arity":4},{"type":"def","source":"lib/witchcraft/apply.ex:422","signature":[["fun",[],null],["a",[],null],["b",[],null],["c",[],null],["d",[],null]],"object_type":"FunctionObject","name":"over","module_id":"Witchcraft.Apply","id":"over/5","doc":"Extends `over` to apply arguments to a ternary function\n\n## Examples\n\n    iex> fn(a, b, c) -> a * b - c end\n    ...> |> over([1, 2], [3, 4], [5, 6])\n    [-2, -3, -1, -2, 1, 0, 3, 2]\n\n","arity":5},{"type":"def","source":"lib/witchcraft/apply.ex:283","signature":[["funs",[],null],["args",[],null]],"object_type":"FunctionObject","name":"provide","module_id":"Witchcraft.Apply","id":"provide/2","doc":"Same as `ap/2`, but with all functions curried.\n\n## Examples\n\n    iex> [&+/2, &*/2]\n    ...> |> provide([1, 2, 3])\n    ...> |> ap([4, 5, 6])\n    [5, 6, 7, 6, 7, 8, 7, 8, 9, 4, 5, 6, 8, 10, 12, 12, 15, 18]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:270","signature":[["args",[],null],["funs",[],null]],"object_type":"FunctionObject","name":"supply","module_id":"Witchcraft.Apply","id":"supply/2","doc":"Same as `convey/2`, but with all functions curried.\n\n## Examples\n\n    iex> [1, 2, 3]\n    ...> |> supply([fn x -> x + 1 end, fn y -> y * 10 end])\n    [2, 10, 3, 20, 4, 30]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:297","signature":[["wrapped_a",[],null],["wrapped_b",[],null]],"object_type":"FunctionObject","name":"then","module_id":"Witchcraft.Apply","id":"then/2","doc":"Sequence actions, replacing the first/previous values with the last argument\n\nThis is essentially a sequence of actions forgetting the first argument\n\n## Examples\n\n    iex> [1, 2, 3]\n    ...> |> then([4, 5, 6])\n    ...> |> then([7, 8, 9])\n    [\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9\n    ]\n\n    iex> {1, 2, 3} |> then({4, 5, 6}) |> then({7, 8, 9})\n    {12, 15, 9}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:251","signature":[["wrapped",[],null],["wrapped_funs",[],null]],"object_type":"FunctionObject","name":"~>>","module_id":"Witchcraft.Apply","id":"~>>/2","doc":"Operator alias for `reverse_ap/2`, moving in the pipe direction\n\n## Examples\n\n    iex> [1, 2, 3] ~>> [fn x -> x + 1 end, fn y -> y * 10 end]\n    [2, 10, 3, 20, 4, 30]\n\n    iex> import Witchcraft.Functor\n    ...>\n    ...> [100, 50]\n    ...> ~>> ([5, 2]     # Note the bracket\n    ...> ~>> ([100, 200] # on both `Apply` lines\n    ...> ~> fn(x, y, z) -> x * y / z end))\n    [5.0, 10.0, 2.0, 4.0, 10.0, 20.0, 4.0, 8.0]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Apply.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/apply.ex:134","signature":[["wrapped_args",[],null],["wrapped_funs",[],null]],"object_type":"FunctionObject","name":"convey","module_id":"Witchcraft.Apply.Proto","id":"convey/2","doc":"Pipe arguments to functions, when both are wrapped in the same\ntype of data structure.\n\n## Examples\n\n    iex> [1, 2, 3]\n    ...> |> convey([fn x -> x + 1 end, fn y -> y * 10 end])\n    [2, 10, 3, 20, 4, 30]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Apply.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/apply.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Apply.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/apply.ex:436","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Apply.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/apply.ex:436","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Apply.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/apply.ex:436","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Apply.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/apply.ex:438","signature":[["g",[],null],["f",[],null]],"object_type":"FunctionObject","name":"convey","module_id":"Witchcraft.Apply.Proto.Function","id":"convey/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:441","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Apply.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/apply.ex:441","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Apply.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/apply.ex:441","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Apply.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/apply.ex:442","signature":[["val_list",[],null],["fun_list",[],null]],"object_type":"FunctionObject","name":"convey","module_id":"Witchcraft.Apply.Proto.List","id":"convey/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/apply.ex:450","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Apply.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/apply.ex:450","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Apply.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/apply.ex:450","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Apply.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/apply.ex:458","signature":[["tuple_b",[],null],["tuple_a",[],null]],"object_type":"FunctionObject","name":"convey","module_id":"Witchcraft.Apply.Proto.Tuple","id":"convey/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:344","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"&&&","module_id":"Witchcraft.Arrow","id":"&&&/2","doc":"Operator alias for `fanout/2`\n\n## Examples\n\n    iex> fanned = fn x -> x - 10 end &&& fn y -> inspect(y) <> \"!\" end\n    ...> fanned.(42)\n    {32, \"42!\"}\n\n    iex> fanned =\n    ...>   fn x -> x - 10 end\n    ...>   &&& fn y -> inspect(y) <> \"!\" end\n    ...>   &&& fn z -> inspect(z) <> \"?\" end\n    ...>   &&& fn d -> inspect(d) <> inspect(d) end\n    ...>   &&& fn e -> e / 2 end\n    ...>\n    ...> fanned.(42)\n    {{{{32, \"42!\"}, \"42?\"}, \"4242\"}, 21.0}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:245","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"^^^","module_id":"Witchcraft.Arrow","id":"^^^/2","doc":"Operator alias for `product/2`\n\n## Examples\n\n    iex> arr = fn x -> x - 10 end ^^^ fn y -> y <> \"!\" end\n    ...> arr.({42, \"Hi\"})\n    {32, \"Hi!\"}\n\n    iex> {42, \"Hi\"} |> (fn x -> x - 10 end ^^^ fn y -> y <> \"!\" end).()\n    {32, \"Hi!\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Arrow","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/arrow.ex:54","signature":[["sample",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"arrowize","module_id":"Witchcraft.Arrow","id":"arrowize/2","doc":"Lift a function into an arrow, much like how `of/2` does with data.\n\nEssentially a label for composing functions end-to-end, where instances\nmay have their own special idea of what composition means. The simplest example\nis a regular function. Others are possible, such as Kleisli arrows.\n\n## Examples\n\n    iex> use Witchcraft.Arrow\n    ...> times_ten = arrowize(fn -> nil end, &(&1 * 10))\n    ...> 5 |> pipe(times_ten)\n    50\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:233","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"beside","module_id":"Witchcraft.Arrow","id":"beside/2","doc":"Alias for `product/2`, meant to invoke a spacial metaphor\n\n## Examples\n\n    iex> beside(&(&1 - 10), &(&1 <> \"!\")).({42, \"Hi\"})\n    {32, \"Hi!\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:323","signature":[["arrow_f",[],null],["arrow_g",[],null]],"object_type":"FunctionObject","name":"fanout","module_id":"Witchcraft.Arrow","id":"fanout/2","doc":"Duplicate incoming data into both halves of a 2-tuple, and run one function\non the left copy, and a different function on the right copy.\n\n             ┌------> f.(a) = x ------┐\n             |                        v\n    a ---> split = {a, a}           {x, y}\n             |                        ^\n             └------> g.(a) = y ------┘\n\n## Examples\n\n    iex> Witchcraft.Semigroupoid.pipe(42, fanout(&(&1 - 10), &(inspect(&1) <> \"!\")))\n    {32, \"42!\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:273","signature":[["arrow",[],null]],"object_type":"FunctionObject","name":"first","module_id":"Witchcraft.Arrow","id":"first/1","doc":"Target the first element of a tuple\n\n## Examples\n\n    iex> first(fn x -> x * 50 end).({1, 1})\n    {50, 1}\n\n","arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:311","signature":[["sample",[],null]],"object_type":"FunctionObject","name":"id_arrow","module_id":"Witchcraft.Arrow","id":"id_arrow/1","doc":"The identity function lifted into an arrow of the correct type\n\n## Examples\n\n    iex> id_arrow(fn -> nil end).(99)\n    99\n\n","arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:443","signature":[["arrow",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"postcompose","module_id":"Witchcraft.Arrow","id":"postcompose/2","doc":"Compose an arrow (left) with a function (right) to produce a new arrow.\n\n## Examples\n\n    iex> f = postcompose(\n    ...>   arrowize(fn _ -> nil end, fn x -> x + 1 end),\n    ...>   fn y -> y * 10 end\n    ...> )\n    ...> f.(42)\n    430\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:427","signature":[["fun",[],null],["arrow",[],null]],"object_type":"FunctionObject","name":"precompose","module_id":"Witchcraft.Arrow","id":"precompose/2","doc":"Compose a function (left) with an arrow (right) to produce a new arrow.\n\n## Examples\n\n    iex> f = precompose(\n    ...>   fn x -> x + 1 end,\n    ...>   arrowize(fn _ -> nil end, fn y -> y * 10 end)\n    ...> )\n    ...> f.(42)\n    430\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:214","signature":[["arrow_f",[],null],["arrow_g",[],null]],"object_type":"FunctionObject","name":"product","module_id":"Witchcraft.Arrow","id":"product/2","doc":"Take two arguments (as a 2-tuple), and run one function on the left side (first element),\nand run a different function on the right side (second element).\n\n      ┌------> f.(a) = x -------┐\n      |                         v\n    {a, b}                    {x, y}\n      |                         ^\n      └------> g.(b) = y -------┘\n\n## Examples\n\n    iex> product(&(&1 - 10), &(&1 <> \"!\")).({42, \"Hi\"})\n    {32, \"Hi!\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:409","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"reassociate","module_id":"Witchcraft.Arrow","id":"reassociate/1","doc":"Switch te associativity of a nested tuple. Helpful since many arrows act\non a subset of a tuple, and you may want to move portions in and oit of that stream.\n\n## Examples\n\n    iex> reassociate({1, {2, 3}})\n    {{1, 2}, 3}\n\n    iex> reassociate({{1, 2}, 3})\n    {1, {2, 3}}\n\n","arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:292","signature":[["arrow",[],null]],"object_type":"FunctionObject","name":"second","module_id":"Witchcraft.Arrow","id":"second/1","doc":"Target the second element of a tuple\n\n## Examples\n\n    iex> second(fn x -> x * 50 end).({1, 1})\n    {1, 50}\n\n","arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:367","signature":[["x",[],null]],"object_type":"FunctionObject","name":"split","module_id":"Witchcraft.Arrow","id":"split/1","doc":"Copy a single value into both positions of a 2-tuple.\n\nThis is useful is you want to run functions on the input separately.\n\n## Examples\n\n    iex> split(42)\n    {42, 42}\n\n    iex> import Witchcraft.Semigroupoid, only: [<~>: 2]\n    ...> 5\n    ...> |> split()\n    ...> |> (second(fn x -> x - 2 end)\n    ...> <~> first(fn y -> y * 10 end)\n    ...> <~> second(&inspect/1)).()\n    {50, \"3\"}\n\n    iex> use Witchcraft.Arrow\n    ...> 5\n    ...> |> split()\n    ...> |> pipe(second(fn x -> x - 2 end))\n    ...> |> pipe(first(fn y -> y * 10 end))\n    ...> |> pipe(second(&inspect/1))\n    {50, \"3\"}\n\n","arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:261","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"swap","module_id":"Witchcraft.Arrow","id":"swap/1","doc":"Swap positions of elements in a tuple.\n\n## Examples\n\n    iex> swap({1, 2})\n    {2, 1}\n\n","arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:397","signature":[["arg",[],"Elixir"],["combine",[],null]],"object_type":"FunctionObject","name":"unsplit","module_id":"Witchcraft.Arrow","id":"unsplit/2","doc":"Merge two tuple values with a combining function.\n\n## Examples\n\n    iex> unsplit({1, 2}, &+/2)\n    3\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Arrow.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:54","signature":[["sample",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"arrowize","module_id":"Witchcraft.Arrow.Proto","id":"arrowize/2","doc":"Lift a function into an arrow, much like how `of/2` does with data.\n\nEssentially a label for composing functions end-to-end, where instances\nmay have their own special idea of what composition means. The simplest example\nis a regular function. Others are possible, such as Kleisli arrows.\n\n## Examples\n\n    iex> use Witchcraft.Arrow\n    ...> times_ten = arrowize(fn -> nil end, &(&1 * 10))\n    ...> 5 |> pipe(times_ten)\n    50\n\n","arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Arrow.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Arrow.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:460","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Arrow.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/arrow.ex:460","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Arrow.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/arrow.ex:460","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Arrow.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/arrow.ex:463","signature":[["_",[],"Elixir"],["fun",[],null]],"object_type":"FunctionObject","name":"arrowize","module_id":"Witchcraft.Arrow.Proto.Function","id":"arrowize/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/arrow.ex:464","signature":[["arrow",[],null]],"object_type":"FunctionObject","name":"first","module_id":"Witchcraft.Arrow.Proto.Function","id":"first/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/bifunctor.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Bifunctor","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/bifunctor.ex:90","signature":[["data",[],null],["f",[],null],["g",[],null]],"object_type":"FunctionObject","name":"bilift","module_id":"Witchcraft.Bifunctor","id":"bilift/3","doc":"The same as `bimap/3`, but with the functions curried\n\n## Examples\n\n    iex> {:ok, 2, \"hi\"}\n    ...> |> bilift(&*/2, &<>/2)\n    ...> |> bimap(fn f -> f.(9) end, fn g -> g.(\"?!\") end)\n    {:ok, 18, \"hi?!\"}\n\n","arity":3},{"type":"def","source":"lib/witchcraft/bifunctor.ex:36","signature":[["data",[],null],["f",[],null],["g",[],null]],"object_type":"FunctionObject","name":"bimap","module_id":"Witchcraft.Bifunctor","id":"bimap/3","doc":"`map` separate fuctions over two fields in a product type.\n\nThe order of fields doesn't always matter in the map.\nThe first/second function application is determined by the instance.\nIt also does not have to map all fields in a product type.\n\n## Diagram\n\n               ┌------------------------------------┐\n               ↓                                    |\n    %Combo{a: 50, b: :ok, c: \"hello\"} |> bimap(&(&1 * 100), &String.upcase/1)\n                                 ↑                                 |\n                                 └---------------------------------┘\n    #=> %Combo{a: 500, b: :ok, c: \"HELLO\"}\n\n## Examples\n\n    iex> {1, \"a\"} |> bimap(&(&1 * 100), &(&1 <> \"!\"))\n    {100, \"a!\"}\n\n    iex> {:msg, 42, \"number is below 50\"}\n    ...> |> bimap(&(%{subject: &1}), &String.upcase/1)\n    {:msg, %{subject: 42}, \"NUMBER IS BELOW 50\"}\n\n","arity":3},{"type":"def","source":"lib/witchcraft/bifunctor.ex:116","signature":[["data",[],null],["f",[],null]],"object_type":"FunctionObject","name":"lift_first","module_id":"Witchcraft.Bifunctor","id":"lift_first/2","doc":"The same as `map_first`, but with a curried function\n\n## Examples\n\n    iex> {:ok, 2, \"hi\"}\n    ...> |> lift_first(&*/2)\n    ...> |> map_first(fn f -> f.(9) end)\n    {:ok, 18, \"hi\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/bifunctor.ex:142","signature":[["data",[],null],["g",[],null]],"object_type":"FunctionObject","name":"lift_second","module_id":"Witchcraft.Bifunctor","id":"lift_second/2","doc":"The same as `map_second`, but with a curried function\n\n## Examples\n\n    iex> {:ok, 2, \"hi\"}\n    ...> |> lift_second(&<>/2)\n    ...> |> map_second(fn f -> f.(\"?!\") end)\n    {:ok, 2, \"hi?!\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/bifunctor.ex:104","signature":[["data",[],null],["f",[],null]],"object_type":"FunctionObject","name":"map_first","module_id":"Witchcraft.Bifunctor","id":"map_first/2","doc":"`map` a function over the first value only\n\n## Examples\n\n    iex> {:ok, 2, \"hi\"} |> map_first(&(&1 * 100))\n    {:ok, 200, \"hi\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/bifunctor.ex:130","signature":[["data",[],null],["g",[],null]],"object_type":"FunctionObject","name":"map_second","module_id":"Witchcraft.Bifunctor","id":"map_second/2","doc":"`map` a function over the second value only\n\n## Examples\n\n    iex> {:ok, 2, \"hi\"} |> map_second(&(&1 <> \"!?\"))\n    {:ok, 2, \"hi!?\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/bifunctor.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Bifunctor.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/bifunctor.ex:36","signature":[["data",[],null],["f",[],null],["g",[],null]],"object_type":"FunctionObject","name":"bimap","module_id":"Witchcraft.Bifunctor.Proto","id":"bimap/3","doc":"`map` separate fuctions over two fields in a product type.\n\nThe order of fields doesn't always matter in the map.\nThe first/second function application is determined by the instance.\nIt also does not have to map all fields in a product type.\n\n## Diagram\n\n               ┌------------------------------------┐\n               ↓                                    |\n    %Combo{a: 50, b: :ok, c: \"hello\"} |> bimap(&(&1 * 100), &String.upcase/1)\n                                 ↑                                 |\n                                 └---------------------------------┘\n    #=> %Combo{a: 500, b: :ok, c: \"HELLO\"}\n\n## Examples\n\n    iex> {1, \"a\"} |> bimap(&(&1 * 100), &(&1 <> \"!\"))\n    {100, \"a!\"}\n\n    iex> {:msg, 42, \"number is below 50\"}\n    ...> |> bimap(&(%{subject: &1}), &String.upcase/1)\n    {:msg, %{subject: 42}, \"NUMBER IS BELOW 50\"}\n\n","arity":3},{"type":"def","source":"lib/witchcraft/bifunctor.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Bifunctor.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/bifunctor.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Bifunctor.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/bifunctor.ex:157","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Bifunctor.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/bifunctor.ex:157","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Bifunctor.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/bifunctor.ex:157","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Bifunctor.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/bifunctor.ex:166","signature":[["tuple",[],null],["f",[],null],["g",[],null]],"object_type":"FunctionObject","name":"bimap","module_id":"Witchcraft.Bifunctor.Proto.Tuple","id":"bimap/3","doc":null,"arity":3},{"type":"def","source":"lib/witchcraft/category.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Category","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/category.ex:51","signature":[["category",[],null]],"object_type":"FunctionObject","name":"id","module_id":"Witchcraft.Category","id":"id/1","doc":"See `Witchcraft.Category.identity/1`.","arity":1},{"type":"def","source":"lib/witchcraft/category.ex:37","signature":[["category",[],null]],"object_type":"FunctionObject","name":"identity","module_id":"Witchcraft.Category","id":"identity/1","doc":"Take some value and return it again\n\n## Examples\n\n    iex> classic_id = identity(fn -> nil end)\n    ...> classic_id.(42)\n    42\n\n","arity":1},{"type":"def","source":"lib/witchcraft/category.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Category.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/category.ex:37","signature":[["category",[],null]],"object_type":"FunctionObject","name":"identity","module_id":"Witchcraft.Category.Proto","id":"identity/1","doc":"Take some value and return it again\n\n## Examples\n\n    iex> classic_id = identity(fn -> nil end)\n    ...> classic_id.(42)\n    42\n\n","arity":1},{"type":"def","source":"lib/witchcraft/category.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Category.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/category.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Category.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/category.ex:70","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Category.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/category.ex:70","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Category.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/category.ex:70","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Category.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/category.ex:71","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"identity","module_id":"Witchcraft.Category.Proto.Function","id":"identity/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:138","signature":[["chain_fun",[],null],["chainable",[],null]],"object_type":"FunctionObject","name":"<<<","module_id":"Witchcraft.Chain","id":"<<</2","doc":"Operator alias for `reverse_chain/2`\n\nExtends the `<~` / `<<~` heirarchy with one more level of power / abstraction\n\n## Examples\n\n    iex> to_monad = fn x -> (fn _ -> x end) end\n    ...> bound = to_monad.(&(&1 + 10)) <<< to_monad.(&(&1 * 10))\n    ...> bound.(10)\n    20\n\nIn Haskell, this is the famous `=<<` operator, but Elixir doesn't allow that\ninfix operator.\n\n","arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:119","signature":[["chainable",[],null],["chain_fun",[],null]],"object_type":"FunctionObject","name":">>>","module_id":"Witchcraft.Chain","id":">>>/2","doc":"Operator alias for `chain/2`\n\nExtends the `~>` / `~>>` heirarchy with one more level of power / abstraction\n\n## Examples\n\n    iex> to_monad = fn x -> (fn _ -> x end) end\n    ...> bound = to_monad.(&(&1 * 10)) >>> to_monad.(&(&1 + 10))\n    ...> bound.(10)\n    20\n\nIn Haskell, this is the famous `>>=` operator, but Elixir doesn't allow that\ninfix operator.\n\n","arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Chain","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/chain.ex:103","signature":[["chainable",[],null],["binder",[],null]],"object_type":"FunctionObject","name":"bind","module_id":"Witchcraft.Chain","id":"bind/2","doc":"An alias for `chain/2`.\n\nProvided as a convenience for those coming from other languages.\n","arity":2},{"type":"defmacro","source":"lib/witchcraft/chain.ex:257","signature":[["list",[],"Elixir"]],"object_type":"FunctionObject","name":"chain","module_id":"Witchcraft.Chain","id":"chain/1","doc":"`do` notation sugar\n\nSequences chainable actions. Note that each line must be of the same type.\n\nFor a version with `return`, please see `Witchcraft.Monad.do/2`\n\n## Examples\n\n    iex> chain do\n    ...>   [1]\n    ...> end\n    [1]\n\n    iex> chain do\n    ...>   [1, 2, 3]\n    ...>   [4, 5, 6]\n    ...>   [7, 8, 9]\n    ...> end\n    [\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9\n    ]\n\n    iex> chain do\n    ...>   a <- [1, 2, 3]\n    ...>   b <- [4, 5, 6]\n    ...>   [a * b]\n    ...> end\n    [\n      4, 8,  12,\n      5, 10, 15,\n      6, 12, 18\n    ]\n\nNormal functions are fine within the `do` as well, as long as each line\nends up being the same chainable type\n\n    iex> import Witchcraft.{Functor, Applicative}\n    ...> chain do\n    ...>   map([1, 2, 3], fn x -> x + 1 end)\n    ...>   of([], 42)\n    ...>   [7, 8, 9] ~> fn x -> x * 10 end\n    ...> end\n    [\n      70, 80, 90,\n      70, 80, 90,\n      70, 80, 90\n    ]\n\nOr with a custom type\n\n    alias Algae.Maybe.{Nothing, Just}\n\n    chain do\n      %Just{just: 4}\n      %Just{just: 5}\n      %Just{just: 6}\n    end\n    #=> %Just{just: 6}\n\n    chain do\n      %Just{just: 4}\n      %Nothing{}\n      %Just{just: 6}\n    end\n    #=> %Nothing{}\n\n## `let` bindings\n\n`let`s allow you to hold static values inside a do-block, much like normal assignment\n\n    iex> chain do\n    ...>   let a = 4\n    ...>   [a]\n    ...> end\n    [4]\n\nThis is somewhat limited, though, as values drawn from a chianable structure\nwith `<-` are not in scope when desugared. For example, this is not possible\ndue to the recursive binding on `x`:\n\n    chain do\n      x <- [1, 2, 3]\n      y <- [4, 5, 6]\n      let will_fail = x + 1\n      [y * will_fail]\n    end\n\n## Desugaring\n\n### Sequencing\n\nThe most basic form\n\n    chain do\n      [1, 2, 3]\n      [4, 5, 6]\n      [7, 8, 9]\n    end\n\nis equivalent to\n\n    [1, 2, 3]\n    |> then([4, 5, 6])\n    |> then([7, 8, 9])\n\n### `<-` (\"drawn from\")\n\nDrawing values from within a chainable structure is similar feels similar\nto assignmet, but it is pulling each value separately in a chain link function.\n\nFor instance\n\n    chain do\n      a <- [1, 2, 3]\n      b <- [4, 5, 6]\n      [a * b]\n    end\n\ndesugars to this\n\n    [1, 2, 3] >>> fn a ->\n      [4, 5, 6] >>> fn b ->\n        [a + b]\n      end\n    end\n\nbut is often much cleaner to read in do-notation, as it cleans up all of the\nnested functions (especially when the chain is very long).\n\n","arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:52","signature":[["chainable",[],null],["link_fun",[],null]],"object_type":"FunctionObject","name":"chain","module_id":"Witchcraft.Chain","id":"chain/2","doc":"Sequentially compose actions, piping values through successive function chains.\n\nThe applied linking function must be unary and return data in the same\ntype of container as the input. The chain function essentially \"unwraps\"\na contained value, applies a linking function that returns\nthe initial (wrapped) type, and collects them into a flat(ter) structure.\n\n`chain/2` is sometimes called \"flat map\", since it can also\nbe expressed as `data |> map(link_fun) |> flatten()`.\n\nAs a diagram:\n\n    %Container<data> --- (data -> %Container<updated_data>) ---> %Container<updated_data>\n\n## Examples\n\n    iex> chain([1, 2, 3], fn x -> [x, x] end)\n    [1, 1, 2, 2, 3, 3]\n\n    iex> [1, 2, 3]\n    ...> |> chain(fn x -> [x, x] end)\n    ...> |> chain(fn y -> [y, 2 * y, 3 * y] end)\n    [1, 2, 3, 1, 2, 3, 2, 4, 6, 2, 4, 6, 3, 6, 9, 3, 6, 9]\n\n    iex> chain([1, 2, 3], fn x ->\n    ...>   chain([x + 1], fn y ->\n    ...>     chain([y + 2, y + 10], fn z ->\n    ...>       [x, y, z]\n    ...>     end)\n    ...>   end)\n    ...> end)\n    [1, 2, 4, 1, 2, 12, 2, 3, 5, 2, 3, 13, 3, 4, 6, 3, 4, 14]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:215","signature":[["action_g",[],null],["action_f",[],null]],"object_type":"FunctionObject","name":"compose_link","module_id":"Witchcraft.Chain","id":"compose_link/2","doc":"Compose link functions to create a new link function.\n\nNote that this runs the same direction as `<|>` (\"the math way\").\n\nThis is `pipe_compose_link/2` with arguments flipped.\n\n## Examples\n\n    iex> links =\n    ...>   fn x -> [x, x] end\n    ...>   |> compose_link(fn y -> [y * 10] end)\n    ...>   |> compose_link(fn z -> [z + 42] end)\n    ...>\n    ...> [1, 2, 3] >>> links\n    [430, 430, 440, 440, 450, 450]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:213","signature":[["nested",[],null]],"object_type":"FunctionObject","name":"flatten","module_id":"Witchcraft.Chain","id":"flatten/1","doc":"See `Witchcraft.Chain.join/1`.","arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:157","signature":[["nested",[],null]],"object_type":"FunctionObject","name":"join","module_id":"Witchcraft.Chain","id":"join/1","doc":"Join together one nested level of a data structure that contains itself\n\n## Examples\n\n    iex> join([[1, 2, 3]])\n    [1, 2, 3]\n\n    iex> join([[1, 2, 3], [4, 5, 6]])\n    [1, 2, 3, 4, 5, 6]\n\n    iex> join([[[1, 2, 3], [4, 5, 6]]])\n    [[1, 2, 3], [4, 5, 6]]\n\n    alias Algae.Maybe.{Nothing, Just}\n    %Just{\n      just: %Just{\n        just: 42\n      }\n    } |> join()\n    #=> %Just{just: 42}\n\n    join %Just{just: %Nothing{}}\n    #=> %Nothing{}\n\n    join %Just{just: %Just{just: %Nothing{}}}\n    #=> %Just{just: %Nothing{}}\n\n    %Nothing{} |> join() |> join() |> join() # ...and so on, forever\n    #=> %Nothing{}\n\nJoining tuples is a bit counterintuitive, as it requires a very specific format:\n\n    iex> join {      # Outer 2-tuple\n    ...>   {1, 2},   # Inner 2-tuple\n    ...>   {\n    ...>     {3, 4}, # Doubly inner 2-tuple\n    ...>     {5, 6, 7}\n    ...>   }\n    ...> }\n    {{4, 6}, {5, 6, 7}}\n\n    iex> join {\n    ...>   {\"a\", \"b\"},\n    ...>   {\n    ...>     {\"!\", \"?\"},\n    ...>     {:ok, 123}\n    ...>   }\n    ...> }\n    {{\"a!\", \"b?\"}, {:ok, 123}}\n\n","arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:430","signature":[["single",[],null]],"object_type":"FunctionObject","name":"normalize","module_id":"Witchcraft.Chain","id":"normalize/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:236","signature":[["action_f",[],null],["action_g",[],null]],"object_type":"FunctionObject","name":"pipe_compose_link","module_id":"Witchcraft.Chain","id":"pipe_compose_link/2","doc":"Compose link functions to create a new link function.\n\nThis is `compose_link/2` with arguments flipped.\n\n## Examples\n\n    iex> links =\n    ...>   fn x -> [x, x] end\n    ...>   |> pipe_compose_link(fn y -> [y * 10] end)\n    ...>   |> pipe_compose_link(fn z -> [z + 42] end)\n    ...>\n    ...> [1, 2, 3] >>> links\n    [52, 52, 62, 62, 72, 72]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:111","signature":[["chainable",[],null],["binder",[],null]],"object_type":"FunctionObject","name":"reverse_bind","module_id":"Witchcraft.Chain","id":"reverse_bind/2","doc":"An alias for `reverse_chain/2`.\n\nProvided as a convenience for those coming from other languages.\n","arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:91","signature":[["chain_fun",[],null],["chainable",[],null]],"object_type":"FunctionObject","name":"reverse_chain","module_id":"Witchcraft.Chain","id":"reverse_chain/2","doc":"`chain/2` but with the arguments flipped\n\n## Examples\n\n    iex> reverse_chain(fn x -> [x, x] end, [1, 2, 3])\n    [1, 1, 2, 2, 3, 3]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Chain.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:52","signature":[["chainable",[],null],["link_fun",[],null]],"object_type":"FunctionObject","name":"chain","module_id":"Witchcraft.Chain.Proto","id":"chain/2","doc":"Sequentially compose actions, piping values through successive function chains.\n\nThe applied linking function must be unary and return data in the same\ntype of container as the input. The chain function essentially \"unwraps\"\na contained value, applies a linking function that returns\nthe initial (wrapped) type, and collects them into a flat(ter) structure.\n\n`chain/2` is sometimes called \"flat map\", since it can also\nbe expressed as `data |> map(link_fun) |> flatten()`.\n\nAs a diagram:\n\n    %Container<data> --- (data -> %Container<updated_data>) ---> %Container<updated_data>\n\n## Examples\n\n    iex> chain([1, 2, 3], fn x -> [x, x] end)\n    [1, 1, 2, 2, 3, 3]\n\n    iex> [1, 2, 3]\n    ...> |> chain(fn x -> [x, x] end)\n    ...> |> chain(fn y -> [y, 2 * y, 3 * y] end)\n    [1, 2, 3, 1, 2, 3, 2, 4, 6, 2, 4, 6, 3, 6, 9, 3, 6, 9]\n\n    iex> chain([1, 2, 3], fn x ->\n    ...>   chain([x + 1], fn y ->\n    ...>     chain([y + 2, y + 10], fn z ->\n    ...>       [x, y, z]\n    ...>     end)\n    ...>   end)\n    ...> end)\n    [1, 2, 4, 1, 2, 12, 2, 3, 5, 2, 3, 13, 3, 4, 6, 3, 4, 14]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Chain.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Chain.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:449","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Chain.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/chain.ex:449","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Chain.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/chain.ex:449","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Chain.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:454","signature":[["fun",[],null],["chain_fun",[],null]],"object_type":"FunctionObject","name":"chain","module_id":"Witchcraft.Chain.Proto.Function","id":"chain/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:457","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Chain.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/chain.ex:457","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Chain.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/chain.ex:457","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Chain.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:458","signature":[["list",[],null],["chain_fun",[],null]],"object_type":"FunctionObject","name":"chain","module_id":"Witchcraft.Chain.Proto.List","id":"chain/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/chain.ex:465","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Chain.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/chain.ex:465","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Chain.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/chain.ex:465","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Chain.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/chain.ex:474","signature":[["arg",[],"Elixir"],["chain_fun",[],null]],"object_type":"FunctionObject","name":"chain","module_id":"Witchcraft.Chain.Proto.Tuple","id":"chain/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/comonad.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Comonad","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/comonad.ex:38","signature":[["nested",[],null]],"object_type":"FunctionObject","name":"extract","module_id":"Witchcraft.Comonad","id":"extract/1","doc":"Extract a value out of some context / data structure. This is the opposite\nof `Witchcraft.Applicative.of/2`.\n\n## Examples\n\n    iex> extract({1, 2})\n    2\n\n    extract(%Id{id: 42})\n    #=> 42\n\n","arity":1},{"type":"def","source":"lib/witchcraft/comonad.ex:55","signature":[["nested",[],null]],"object_type":"FunctionObject","name":"unwrap","module_id":"Witchcraft.Comonad","id":"unwrap/1","doc":"Alias for `extract/1`\n\n## Examples\n\n    iex> unwrap({1, 2})\n    2\n\n    unwrap(%Id{id: 42})\n    #=> 42\n\n","arity":1},{"type":"def","source":"lib/witchcraft/comonad.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Comonad.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/comonad.ex:38","signature":[["nested",[],null]],"object_type":"FunctionObject","name":"extract","module_id":"Witchcraft.Comonad.Proto","id":"extract/1","doc":"Extract a value out of some context / data structure. This is the opposite\nof `Witchcraft.Applicative.of/2`.\n\n## Examples\n\n    iex> extract({1, 2})\n    2\n\n    extract(%Id{id: 42})\n    #=> 42\n\n","arity":1},{"type":"def","source":"lib/witchcraft/comonad.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Comonad.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/comonad.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Comonad.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/comonad.ex:96","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Comonad.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/comonad.ex:96","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Comonad.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/comonad.ex:96","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Comonad.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/comonad.ex:102","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"extract","module_id":"Witchcraft.Comonad.Proto.Tuple","id":"extract/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Extend","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/extend.ex:257","signature":[["g",[],null],["f",[],null]],"object_type":"FunctionObject","name":"compose_colink","module_id":"Witchcraft.Extend","id":"compose_colink/2","doc":"\n## Examples\n\n    iex> composed =\n    ...>   fn xs -> List.first(xs) * 10 end\n    ...>   |> compose_colink(fn ys -> List.first(ys) - 10 end)\n    ...>\n    ...> extend([1, 2, 3], composed)\n    [-90, -80, -70]\n\n    iex> fn xs -> List.first(xs) * 10 end\n    ...> |> compose_colink(fn ys -> List.first(ys) - 10 end)\n    ...> |> compose_colink(fn zs -> List.first(zs) * 50 end)\n    ...> |> reverse_extend([1, 2, 3])\n    [400, 900, 1400]\n\n    iex> fn xs -> List.first(xs) * 10 end\n    ...> |> compose_colink(fn ys -> List.first(ys) - 10 end)\n    ...> |> compose_colink(fn zs -> List.first(zs) * 50 end)\n    ...> |> compose_colink(fn zs -> List.first(zs) + 12 end)\n    ...> |> reverse_extend([1, 2, 3])\n    [6400, 6900, 7400]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/extend.ex:230","signature":[["data",[],null],["colink",[],null]],"object_type":"FunctionObject","name":"curried_extend","module_id":"Witchcraft.Extend","id":"curried_extend/2","doc":"The same as `extend/2`, but with the colinking function curried.\n\n## Examples\n\n    iex> [1, 2, 3]\n    ...> |> curried_extend(fn(list, coeff) -> List.first(list) * coeff end)\n    ...> |> extend(fn(funs) -> List.first(funs).(10) end)\n    [10, 20, 30]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/extend.ex:191","signature":[["data",[],null],["colink",[],null]],"object_type":"FunctionObject","name":"extend","module_id":"Witchcraft.Extend","id":"extend/2","doc":"Similar to `Witchcraft.Chain.chain/2`, except that it reverses the input and output\ntypes of the colinking function.\n\n## Examples\n\nChain:\n\n    iex> Witchcraft.Chain.chain([1, 2, 3], fn x -> [x * 10] end)\n    [10, 20, 30]\n\nExtend:\n\n    iex> extend([1, 2, 3], fn list -> List.first(list) * 10 end)\n    [10, 20, 30]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/extend.ex:43","signature":[["data",[],null]],"object_type":"FunctionObject","name":"nest","module_id":"Witchcraft.Extend","id":"nest/1","doc":"Wrap some nestable data structure in another layer of itself\n\n## Examples\n\n    iex> nest([1, 2, 3])\n    [[1, 2, 3], [2, 3], [3]]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:285","signature":[["f",[],null],["g",[],null]],"object_type":"FunctionObject","name":"pipe_compose_colink","module_id":"Witchcraft.Extend","id":"pipe_compose_colink/2","doc":"`pipe_colink/2` with functions curried.\n\n## Examples\n\n    iex> fn xs -> List.first(xs) * 10 end\n    ...> |> pipe_compose_colink(fn ys -> List.first(ys) - 2 end)\n    ...> |> reverse_extend([1, 2, 3])\n    [8, 18, 28]\n\n    iex> composed =\n    ...>   fn xs -> List.first(xs) * 10 end\n    ...>   |> pipe_compose_colink(fn ys -> List.first(ys) - 2 end)\n    ...>   |> pipe_compose_colink(fn zs -> List.first(zs) * 5 end)\n    ...>\n    ...> extend([1, 2, 3], composed)\n    [40, 90, 140]\n\n    iex> fn xs -> List.first(xs) * 10 end\n    ...> |> pipe_compose_colink(fn ys -> List.first(ys) - 2 end)\n    ...> |> pipe_compose_colink(fn zs -> List.first(zs) * 5 end)\n    ...> |> pipe_compose_colink(fn zs -> List.first(zs) + 1 end)\n    ...> |> reverse_extend([1, 2, 3])\n    [41, 91, 141]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/extend.ex:244","signature":[["colink",[],null],["data",[],null]],"object_type":"FunctionObject","name":"reverse_curried_extend","module_id":"Witchcraft.Extend","id":"reverse_curried_extend/2","doc":"The same as `extend/2`, but with the colinking function curried.\n\n## Examples\n\n    iex> fn(list) -> List.first(list) * 10 end\n    ...> |> reverse_curried_extend([1, 2, 3])\n    [10, 20, 30]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/extend.ex:215","signature":[["colink",[],null],["data",[],null]],"object_type":"FunctionObject","name":"reverse_extend","module_id":"Witchcraft.Extend","id":"reverse_extend/2","doc":"`extend/2` with arguments flipped.\n\nMakes piping composed colinks easier (see `compose_colink/2` and `pipe_compose_colink/2`).\n\n## Examples\n\n    iex> fn list -> List.first(list) * 10 end\n    ...> |> reverse_extend([1, 2, 3])\n    [10, 20, 30]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/extend.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Extend.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Extend.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Extend.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:43","signature":[["data",[],null]],"object_type":"FunctionObject","name":"nest","module_id":"Witchcraft.Extend.Proto","id":"nest/1","doc":"Wrap some nestable data structure in another layer of itself\n\n## Examples\n\n    iex> nest([1, 2, 3])\n    [[1, 2, 3], [2, 3], [3]]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:315","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Extend.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/extend.ex:315","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Extend.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/extend.ex:315","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Extend.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:316","signature":[["fun",[],null]],"object_type":"FunctionObject","name":"nest","module_id":"Witchcraft.Extend.Proto.Function","id":"nest/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:329","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Extend.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/extend.ex:329","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Extend.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/extend.ex:329","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Extend.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:330","signature":[["entire",[],null]],"object_type":"FunctionObject","name":"nest","module_id":"Witchcraft.Extend.Proto.List","id":"nest/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:334","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Extend.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/extend.ex:334","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Extend.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/extend.ex:334","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Extend.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/extend.ex:340","signature":[["arg",[],"Elixir"]],"object_type":"FunctionObject","name":"nest","module_id":"Witchcraft.Extend.Proto.Tuple","id":"nest/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Foldable","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable.ex:535","signature":[["foldable_bools",[],null]],"object_type":"FunctionObject","name":"all?","module_id":"Witchcraft.Foldable","id":"all?/1","doc":"Check if a foldable is full of only `true`s\n\n## Examples\n\n    iex> all?([true, true, false])\n    false\n\n    %BinaryTree{\n      left:  true,\n      right: %BinaryTree{\n        left:  true,\n        right: false\n      }\n    } |> all?()\n    #=> false\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:556","signature":[["foldable",[],null],["predicate",[],null]],"object_type":"FunctionObject","name":"all?","module_id":"Witchcraft.Foldable","id":"all?/2","doc":"The same as `all?/1`, but with a custom predicate matcher\n\n## Examples\n\n    iex> import Integer\n    ...> all?([1, 2, 3], &is_odd/1)\n    false\n\n    %BinaryTree{\n      left:  1,\n      right: %BinaryTree{\n        left:  2,\n        right: 3\n      }\n    }\n    |> all?(&Integer.is_odd?/1)\n    #=> false\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:581","signature":[["foldable_bools",[],null]],"object_type":"FunctionObject","name":"any?","module_id":"Witchcraft.Foldable","id":"any?/1","doc":"Check if a foldable contains any `true`s\n\n## Examples\n\n    iex> any? [true, true, false]\n    true\n\n    %BinaryTree{\n      left:  true,\n      right: %BinaryTree{\n        left:  true,\n        right: false\n      }\n    } |> any?()\n    #=> true\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:602","signature":[["foldable",[],null],["predicate",[],null]],"object_type":"FunctionObject","name":"any?","module_id":"Witchcraft.Foldable","id":"any?/2","doc":"The same as `all?/1`, but with a custom predicate matcher\n\n## Examples\n\n    iex> require Integer\n    ...> any?([1, 2, 3], &Integer.is_odd/1)\n    true\n\n    %BinaryTree{\n      left:  1,\n      right: %BinaryTree{\n        left:  2,\n        right: 3\n      }\n    }\n    |> any(&Integer.is_odd?/1)\n    #=> true\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:465","signature":[["contained_lists",[],null]],"object_type":"FunctionObject","name":"concat","module_id":"Witchcraft.Foldable","id":"concat/1","doc":"Concatenate all lists in a foldable structure\n\n## Examples\n\n    iex> concat([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    %BinaryTree{\n      left:  [1, 2, 3],\n      right: %BinaryTree{\n        left:  [4, 5],\n        right: [6]\n      }\n    }\n    |> concat()\n    #=> [1, 2, 3, 4, 5, 6]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:489","signature":[["foldable",[],null],["mapper",[],null]],"object_type":"FunctionObject","name":"concat_map","module_id":"Witchcraft.Foldable","id":"concat_map/2","doc":"Lift a function over a foldable structure generating lists of results,\nand then concatenate the resulting lists\n\n## Examples\n\n    iex> concat_map([1, 2, 3, 4, 5, 6], fn x -> [x, x] end)\n    [1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6]\n\n    %BinaryTree{\n      left:  1,\n      right: %BinaryTree{\n        left:  2,\n        right: 3\n      }\n    }\n    |> concat_map(fn x -> [x, x] end)\n    #=> [1, 1, 2, 2, 3, 3]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:270","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"count","module_id":"Witchcraft.Foldable","id":"count/1","doc":"See `Witchcraft.Foldable.length/1`.","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:234","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"empty?","module_id":"Witchcraft.Foldable","id":"empty?/1","doc":"Check if a foldable data structure is empty\n\n## Examples\n\n    iex> empty?(\"\")\n    true\n\n    iex> empty?(\"hi\")\n    false\n\n    iex> empty?(%{})\n    true\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:179","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"fold","module_id":"Witchcraft.Foldable","id":"fold/1","doc":"Combine all elements using monoidal append\n\n## Examples\n\n    iex> fold([1, 2, 3])\n    6\n\n    iex> fold([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:194","signature":[["foldable",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"fold_map","module_id":"Witchcraft.Foldable","id":"fold_map/2","doc":"Map a functional over all elements and `fold` them together\n\n## Examples\n\n    iex> fold_map([1, 2, 3], fn x -> [x, x * 10] end)\n    [1, 10, 2, 20, 3, 30]\n\n    iex> fold_map([[1, 2, 3], [4, 5, 6], [7, 8, 9]], fn x -> [x, x] end)\n    [\n      [1, 2, 3], [1, 2, 3],\n      [4, 5, 6], [4, 5, 6],\n      [7, 8, 9], [7, 8, 9]\n    ]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:159","signature":[["foldable",[],null],["folder",[],null]],"object_type":"FunctionObject","name":"left_fold","module_id":"Witchcraft.Foldable","id":"left_fold/2","doc":"The same as `left_fold/3`, but uses the first element as the seed\n\n## Examples\n\n    iex> left_fold([1, 2, 3], &+/2)\n    6\n\n    iex> left_fold([100, 2, 5], &//2)\n    10.0 # ((100 / 2) / 5)\n\n    iex> left_fold([1 | [2 | [3]]], fn(x, acc) -> [x | acc] end)\n    [[1 | 2] | 3]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:130","signature":[["foldable",[],null],["seed",[],null],["folder",[],null]],"object_type":"FunctionObject","name":"left_fold","module_id":"Witchcraft.Foldable","id":"left_fold/3","doc":"Left-associative fold over a structure to alter the structure and/or reduce\nit to a single summary value.\n\nThe folder must be a binary function, with the second argument being the\naccumulated value thus far.\n\n## Examples\n\n    iex> sum = fn xs -> right_fold(xs, 0, &+/2) end\n    ...> sum.([1, 2, 3])\n    6\n    ...> sum.([4, 5, 6])\n    15\n\n    iex> left_fold([1, 2, 3], [], fn(x, acc) -> [x | acc] end)\n    [[[[] | 1] | 2] | 3]\n\n","arity":3},{"type":"def","source":"lib/witchcraft/foldable.ex:252","signature":[["list",[],null]],"object_type":"FunctionObject","name":"length","module_id":"Witchcraft.Foldable","id":"length/1","doc":"Count the number of elements in a foldable structure\n\n## Examples\n\n    iex> use Witchcraft.Foldable\n    ...> length(%{})\n    0\n    iex> length(%{a: 1, b: 2})\n    2\n    iex> length(\"ࠀabc\")\n    4\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:325","signature":[["foldable_comparable",[],null]],"object_type":"FunctionObject","name":"max","module_id":"Witchcraft.Foldable","id":"max/1","doc":"Find the maximum element in a foldable structure using the default ordering\nfrom `Witchcraft.Ord`.\n\nElements must implement `Witchcraft.Ord`.\n\n## Examples\n\n    iex> use Witchcraft.Foldable\n    ...> max([2, 3, 1])\n    3\n    ...> max([[4], [1, 2, 3, 4]])\n    [4]\n\n    %BinaryTree{\n      node: 1,\n      left: %BinaryTree{\n        node: 3\n        left: 4\n      },\n      right: 2\n    }\n    |> max()\n    #=> 4\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:296","signature":[["foldable",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"max","module_id":"Witchcraft.Foldable","id":"max/2","doc":"Find the maximum element in a foldable structure using a custom comparitor\n\nElements must implement `Witchcraft.Ord`.\n\nComes in both a safe and unsafe(`!`) version\n\n## Examples\n\n    iex> use Witchcraft.Foldable\n    ...> [1, 2, 7]\n    ...> |> max(by: fn(x, y) ->\n    ...>   x\n    ...>   |> Integer.mod(3)\n    ...>   |> Witchcraft.Ord.compare(Integer.mod(y, 3))\n    ...> end)\n    2\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:273","signature":[["foldable",[],null],["target",[],null]],"object_type":"FunctionObject","name":"member?","module_id":"Witchcraft.Foldable","id":"member?/2","doc":"Check if a foldable structure contains a particular element\n\n## Examples\n\n    iex> member?([1, 2, 3], 2)\n    true\n\n    iex> member?([1, 2, 3], 99)\n    false\n\n    iex> member?(%{a: 1, b: 2}, 2)\n    false\n\n    iex> member?(%{a: 1, b: 2}, {:b, 2})\n    true\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:383","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"min","module_id":"Witchcraft.Foldable","id":"min/1","doc":"Find the minimum element in a foldable structure using the default ordering\nfrom `Witchcraft.Ord`.\n\nElements must implement `Witchcraft.Ord`.\n\n## Examples\n\n    iex> use Witchcraft.Foldable\n    ...> min([2, 3, 1])\n    1\n    ...> min([[4], [1, 2, 3, 4]])\n    [1, 2, 3, 4]\n\n    %BinaryTree{\n      node: 4,\n      left: %BinaryTree{\n        node: 3\n        left: 1\n      },\n      right: 2\n    }\n    |> min()\n    #=> 1\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:354","signature":[["foldable",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"min","module_id":"Witchcraft.Foldable","id":"min/2","doc":"Find the maximum element in a foldable structure using a custom comparitor\n\nElements must implement `Witchcraft.Ord`.\n\nComes in both a safe and unsafe(`!`) version\n\n## Examples\n\n    iex> use Witchcraft.Foldable\n    ...> [8, 2, 1]\n    ...> |> min(by: fn(x, y) ->\n    ...>   x\n    ...>   |> Integer.mod(4)\n    ...>   |> Witchcraft.Ord.compare(Integer.mod(y, 4))\n    ...> end)\n    8\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:518","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"null?","module_id":"Witchcraft.Foldable","id":"null?/1","doc":"Test whether the structure is empty. The default implementation is\noptimized for structures that are similar to lists, because there\nis no general way to do better.\n\n## Examples\n\n    iex> null?([])\n    true\n\n    iex> null?([1, 2, 3])\n    false\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:443","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"product","module_id":"Witchcraft.Foldable","id":"product/1","doc":"Product of all numbers in a foldable\n\n## Examples\n\n    iex> product([1, 2, 3])\n    6\n\n    %BinaryTree{\n      left:  4,\n      right: %BinaryTree{\n        left: 2,\n        right: 10\n      }\n    }\n    |> product()\n    #=> 80\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:412","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"random","module_id":"Witchcraft.Foldable","id":"random/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:107","signature":[["foldable",[],null],["folder",[],null]],"object_type":"FunctionObject","name":"right_fold","module_id":"Witchcraft.Foldable","id":"right_fold/2","doc":"The same as `right_fold/3`, but uses the first element as the seed\n\n## Examples\n\n    iex> right_fold([1, 2, 3], &+/2)\n    6\n\n    iex> right_fold([100, 2, 5], &//2)\n    40.0 # (2 / (5 / 100))\n\n    iex> right_fold([[], 1, 2, 3], fn(x, acc) -> [x | acc] end)\n    [1, 2, 3]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/foldable.ex:63","signature":[["foldable",[],null],["seed",[],null],["folder",[],null]],"object_type":"FunctionObject","name":"right_fold","module_id":"Witchcraft.Foldable","id":"right_fold/3","doc":"Right-associative fold over a structure to alter the structure and/or reduce\nit to a single summary value. The right-association makes it possible to\ncease computation on infinite streams of data.\n\nThe folder must be a binary function, with the second argument being the\naccumulated value thus far.\n\n## Examples\n\n    iex> sum = fn xs -> right_fold(xs, 0, &+/2) end\n    ...> sum.([1, 2, 3])\n    6\n    ...> sum.([4, 5, 6])\n    15\n\n","arity":3},{"type":"def","source":"lib/witchcraft/foldable.ex:271","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"size","module_id":"Witchcraft.Foldable","id":"size/1","doc":"See `Witchcraft.Foldable.length/1`.","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:422","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"sum","module_id":"Witchcraft.Foldable","id":"sum/1","doc":"Sum all numbers in a foldable\n\n## Examples\n\n    iex> sum([1, 2, 3])\n    6\n\n    %BinaryTree{\n      left:  4,\n      right: %BinaryTree{\n        left: 2,\n        right: 10\n      }\n    } |> sum()\n    #=> 16\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:627","signature":[["foldable_monad",[],null]],"object_type":"FunctionObject","name":"then_sequence","module_id":"Witchcraft.Foldable","id":"then_sequence/1","doc":"Run each action from left to right, discarding all values.\n\nAlways returns `%Witchcraft.Unit{}` in the same foldbale structure that you started with.\n\n## Examples\n\n    iex> then_sequence([[1, 2, 3], [4, 5, 6]])\n    [\n      %Witchcraft.Unit{},\n      %Witchcraft.Unit{},\n      %Witchcraft.Unit{},\n      %Witchcraft.Unit{},\n      %Witchcraft.Unit{},\n      %Witchcraft.Unit{},\n      %Witchcraft.Unit{},\n      %Witchcraft.Unit{},\n      %Witchcraft.Unit{}\n    ]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:219","signature":[["foldable",[],null]],"object_type":"FunctionObject","name":"to_list","module_id":"Witchcraft.Foldable","id":"to_list/1","doc":"Turn any `Foldable` into a `List`\n\n## Example\n\n    iex> to_list({1, 2, 3})\n    [1, 2, 3]\n\n    iex> to_list(%{a: 1, b: 2, c: 3})\n    [c: 3, b: 2, a: 1]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/foldable/empty_error.ex:25","signature":[["msg",[],null]],"object_type":"FunctionObject","name":"exception","module_id":"Witchcraft.Foldable.EmptyError","id":"exception/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/foldable/empty_error.ex:25","signature":[["exception",[],null]],"object_type":"FunctionObject","name":"message","module_id":"Witchcraft.Foldable.EmptyError","id":"message/1","doc":null,"arity":1},{"type":"defmacro","source":"lib/witchcraft/foldable/empty_error.ex:27","signature":[["data",[],null]],"object_type":"FunctionObject","name":"new","module_id":"Witchcraft.Foldable.EmptyError","id":"new/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Foldable.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Foldable.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Foldable.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/foldable.ex:63","signature":[["foldable",[],null],["seed",[],null],["folder",[],null]],"object_type":"FunctionObject","name":"right_fold","module_id":"Witchcraft.Foldable.Proto","id":"right_fold/3","doc":"Right-associative fold over a structure to alter the structure and/or reduce\nit to a single summary value. The right-association makes it possible to\ncease computation on infinite streams of data.\n\nThe folder must be a binary function, with the second argument being the\naccumulated value thus far.\n\n## Examples\n\n    iex> sum = fn xs -> right_fold(xs, 0, &+/2) end\n    ...> sum.([1, 2, 3])\n    6\n    ...> sum.([4, 5, 6])\n    15\n\n","arity":3},{"type":"def","source":"lib/witchcraft/foldable/bitstring.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Foldable.Proto.BitString","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable/bitstring.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Foldable.Proto.BitString","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable/bitstring.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Foldable.Proto.BitString","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/foldable/bitstring.ex:4","signature":[["string",[],null],["seed",[],null],["reducer",[],null]],"object_type":"FunctionObject","name":"right_fold","module_id":"Witchcraft.Foldable.Proto.BitString","id":"right_fold/3","doc":null,"arity":3},{"type":"def","source":"lib/witchcraft/foldable/list.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Foldable.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable/list.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Foldable.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable/list.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Foldable.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/foldable/list.ex:4","signature":[["list",[],null],["seed",[],null],["reducer",[],null]],"object_type":"FunctionObject","name":"right_fold","module_id":"Witchcraft.Foldable.Proto.List","id":"right_fold/3","doc":null,"arity":3},{"type":"def","source":"lib/witchcraft/foldable/map.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Foldable.Proto.Map","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable/map.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Foldable.Proto.Map","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable/map.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Foldable.Proto.Map","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/foldable/map.ex:4","signature":[["map",[],null],["seed",[],null],["reducer",[],null]],"object_type":"FunctionObject","name":"right_fold","module_id":"Witchcraft.Foldable.Proto.Map","id":"right_fold/3","doc":null,"arity":3},{"type":"def","source":"lib/witchcraft/foldable/tuple.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Foldable.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable/tuple.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Foldable.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/foldable/tuple.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Foldable.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/foldable/tuple.ex:4","signature":[["tuple",[],null],["seed",[],null],["reducer",[],null]],"object_type":"FunctionObject","name":"right_fold","module_id":"Witchcraft.Foldable.Proto.Tuple","id":"right_fold/3","doc":null,"arity":3},{"type":"def","source":"lib/witchcraft/functor.ex:150","signature":[["fun",[],null],["data",[],null]],"object_type":"FunctionObject","name":"<~","module_id":"Witchcraft.Functor","id":"<~/2","doc":"`<~/2` with arguments flipped.\n\n    iex> (fn x -> x + 5 end) <~ [1,2,3]\n    [6, 7, 8]\n\nNote that the mnemonic is flipped from `|>`, and combinging directions can\nbe confusing. It's generally recommended to use `~>`, or to keep `<~` on\nthe same line both of it's arguments:\n\n    iex> fn(x, y) -> x + y end <~ [1, 2, 3]\n    ...> |> List.first()\n    ...> |> apply([9])\n    10\n\n...or in an expression that's only pointing left:\n\n    iex> fn y -> y * 10 end\n    ...> <~ fn x -> x + 55 end\n    ...> <~ [1, 2, 3]\n    [560, 570, 580]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Functor","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:77","signature":[["fun",[],null],["wrapped",[],null]],"object_type":"FunctionObject","name":"across","module_id":"Witchcraft.Functor","id":"across/2","doc":"`map` with its arguments flipped.\n\n## Examples\n\n    iex> across(fn x -> x + 1 end, [1, 2, 3])\n    [2, 3, 4]\n\n    iex> fn\n    ...>   int when is_integer(int) -> int * 100\n    ...>   value -> inspect(value)\n    ...> end\n    ...> |> across(%{a: 2, b: [1, 2, 3]})\n    %{a: 200, b: \"[1, 2, 3]\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:217","signature":[["fun",[],null],["functor",[],null]],"object_type":"FunctionObject","name":"async_across","module_id":"Witchcraft.Functor","id":"async_across/2","doc":"`async_map/2` with arguments flipped.\n\n## Examples\n\n    iex> fn x -> x * 10 end\n    ...> |> async_across([1, 2, 3])\n    [10, 20, 30]\n\n    fn x ->\n      Process.sleep(500)\n      x * 10\n    end\n    |> async_across(Enumto_list(0..10_000))\n    #=> [0, 10, ...] in around a second\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:237","signature":[["functor",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"async_lift","module_id":"Witchcraft.Functor","id":"async_lift/2","doc":"The same as `async_map/2`, except with the mapping function curried\n\n## Examples\n\n    iex> async_lift([1, 2, 3], fn x -> x * 10 end)\n    [10, 20, 30]\n\n    0..10_000\n    |> Enum.to_list()\n    |> async_lift(fn x ->\n      Process.sleep(500)\n      x * 10\n    end)\n    #=> [0, 10, ...] in around a second\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:187","signature":[["functor",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"async_map","module_id":"Witchcraft.Functor","id":"async_map/2","doc":"`map` a function over a data structure, with each mapping occuring asynchronously.\n\nEspecially helpful when each application take a long time.\n\n## Examples\n\n    iex> async_map([1, 2, 3], fn x -> x * 10 end)\n    [10, 20, 30]\n\n    0..10_000\n    |> Enum.to_list()\n    |> async_map(fn x ->\n      Process.sleep(500)\n      x * 10\n    end)\n    #=> [0, 10, ...] in around a second\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:257","signature":[["fun",[],null],["functor",[],null]],"object_type":"FunctionObject","name":"async_over","module_id":"Witchcraft.Functor","id":"async_over/2","doc":"`async_lift/2` with arguments flipped.\n\n## Examples\n\n    iex> fn x -> x * 10 end\n    ...> |> async_over([1, 2, 3])\n    [10, 20, 30]\n\n    fn x ->\n      Process.sleep(500)\n      x * 10\n    end\n    |> async_over(Enumto_list(0..10_000))\n    #=> [0, 10, ...] in around a second\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:96","signature":[["wrapped",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"lift","module_id":"Witchcraft.Functor","id":"lift/2","doc":"`map/2` but with the function automatically curried\n\n## Examples\n\n    iex> lift([1, 2, 3], fn x -> x + 1 end)\n    [2, 3, 4]\n\n    iex> [1, 2, 3]\n    ...> |> lift(fn x -> x + 55 end)\n    ...> |> lift(fn y -> y * 10 end)\n    [560, 570, 580]\n\n    iex> [1, 2, 3]\n    ...> |> lift(fn(x, y) -> x + y end)\n    ...> |> List.first()\n    ...> |> apply([9])\n    10\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:32","signature":[["wrapped",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"map","module_id":"Witchcraft.Functor","id":"map/2","doc":"`map` a function into one layer of a data wrapper.\nThere is an autocurrying variant: `lift/2`.\n\n## Examples\n\n    iex> map([1, 2, 3], fn x -> x + 1 end)\n    [2, 3, 4]\n\n    iex> %{a: 1, b: 2} ~> fn x -> x * 10 end\n    %{a: 10, b: 20}\n\n    iex> map(%{a: 2, b: [1, 2, 3]}, fn\n    ...>   int when is_integer(int) -> int * 100\n    ...>   value -> inspect(value)\n    ...> end)\n    %{a: 200, b: \"[1, 2, 3]\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:119","signature":[["fun",[],null],["wrapped",[],null]],"object_type":"FunctionObject","name":"over","module_id":"Witchcraft.Functor","id":"over/2","doc":"`lift/2` but with arguments flipped.\n\n## Examples\n\n    iex> fn x -> x + 1 end |> over([1, 2, 3])\n    [2, 3, 4]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:175","signature":[["wrapped",[],null],["replace_with",[],null]],"object_type":"FunctionObject","name":"replace","module_id":"Witchcraft.Functor","id":"replace/2","doc":"Replace all inner elements with a constant value\n\n## Examples\n\n    iex> replace([1, 2, 3], \"hi\")\n    [\"hi\", \"hi\", \"hi\"]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:131","signature":[["data",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"~>","module_id":"Witchcraft.Functor","id":"~>/2","doc":"Operator alias for `lift/2`\n\n## Example\n\n    iex> [1, 2, 3]\n    ...> ~> fn x -> x + 55 end\n    ...> ~> fn y -> y * 10 end\n    [560, 570, 580]\n\n    iex> [1, 2, 3]\n    ...> ~> fn(x, y) -> x + y end\n    ...> |> List.first()\n    ...> |> apply([9])\n    10\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Functor.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/functor.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Functor.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/functor.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Functor.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/functor.ex:32","signature":[["wrapped",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"map","module_id":"Witchcraft.Functor.Proto","id":"map/2","doc":"`map` a function into one layer of a data wrapper.\nThere is an autocurrying variant: `lift/2`.\n\n## Examples\n\n    iex> map([1, 2, 3], fn x -> x + 1 end)\n    [2, 3, 4]\n\n    iex> %{a: 1, b: 2} ~> fn x -> x * 10 end\n    %{a: 10, b: 20}\n\n    iex> map(%{a: 2, b: [1, 2, 3]}, fn\n    ...>   int when is_integer(int) -> int * 100\n    ...>   value -> inspect(value)\n    ...> end)\n    %{a: 200, b: \"[1, 2, 3]\"}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:278","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Functor.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:278","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Functor.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:278","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Functor.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/functor.ex:281","signature":[["f",[],null],["g",[],null]],"object_type":"FunctionObject","name":"map","module_id":"Witchcraft.Functor.Proto.Function","id":"map/2","doc":"Compose functions\n\n## Example\n\n    iex> ex = Witchcraft.Functor.lift(fn x -> x * 10 end, fn x -> x + 2 end)\n    ...> ex.(2)\n    22\n\n","arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:294","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Functor.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:294","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Functor.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:294","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Functor.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/functor.ex:295","signature":[["list",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"map","module_id":"Witchcraft.Functor.Proto.List","id":"map/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:332","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Functor.Proto.Map","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:332","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Functor.Proto.Map","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:332","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Functor.Proto.Map","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/functor.ex:333","signature":[["hashmap",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"map","module_id":"Witchcraft.Functor.Proto.Map","id":"map/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/functor.ex:298","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Functor.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:298","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Functor.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/functor.ex:298","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Functor.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/functor.ex:299","signature":[["tuple",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"map","module_id":"Witchcraft.Functor.Proto.Tuple","id":"map/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/monad.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Monad","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"defmacro","source":"lib/witchcraft/monad.ex:72","signature":[["sample",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"monad","module_id":"Witchcraft.Monad","id":"monad/2","doc":"do-notation enhanced with a `return` operation.\n\n`return` is the simplest possible linking function, providing the correct `of/2`\ninstance for your monad.\n\n## Examples\n\n    iex> monad [] do\n    ...>   [1, 2, 3]\n    ...> end\n    [1, 2, 3]\n\n    iex> monad [] do\n    ...>   [1, 2, 3]\n    ...>   [4, 5, 6]\n    ...>   [7, 8, 9]\n    ...> end\n    [\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9,\n      7, 8, 9\n    ]\n\n    iex> monad [] do\n    ...>   Witchcraft.Applicative.of([], 1)\n    ...> end\n    [1]\n\n    iex> monad [] do\n    ...>  a <- [1,2,3]\n    ...>  b <- [4,5,6]\n    ...>  return(a * b)\n    ...> end\n    [\n      4, 8,  12,\n      5, 10, 15,\n      6, 12, 18\n    ]\n\n    iex> monad [] do\n    ...>   a <- return 1\n    ...>   b <- return 2\n    ...>   return(a + b)\n    ...> end\n    [3]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/monad.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Monad.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monad.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Monad.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monad.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Monad.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monad.ex:141","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monad.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monad.ex:141","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monad.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monad.ex:141","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monad.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monad.ex:142","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monad.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monad.ex:142","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monad.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monad.ex:142","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monad.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monad.ex:144","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monad.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monad.ex:144","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monad.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monad.ex:144","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monad.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Monoid","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:30","signature":[["sample",[],null]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid","id":"empty/1","doc":"An \"emptied out\" or \"starting position\" of the passed data\n\n## Example\n\n    iex> empty(10)\n    0\n\n    iex> empty [1, 2, 3, 4, 5]\n    []\n\n","arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:47","signature":[["monoid",[],null]],"object_type":"FunctionObject","name":"empty?","module_id":"Witchcraft.Monoid","id":"empty?/1","doc":"Check if a value is the empty element of that type\n\n## Examples\n\n    iex> empty?([])\n    true\n\n    iex> empty?([1])\n    false\n\n","arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:45","signature":[["sample",[],null]],"object_type":"FunctionObject","name":"zero","module_id":"Witchcraft.Monoid","id":"zero/1","doc":"See `Witchcraft.Monoid.empty/1`.","arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Monoid.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:30","signature":[["sample",[],null]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid.Proto","id":"empty/1","doc":"An \"emptied out\" or \"starting position\" of the passed data\n\n## Example\n\n    iex> empty(10)\n    0\n\n    iex> empty [1, 2, 3, 4, 5]\n    []\n\n","arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Monoid.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Monoid.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:97","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monoid.Proto.BitString","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:97","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monoid.Proto.BitString","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:97","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monoid.Proto.BitString","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:98","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid.Proto.BitString","id":"empty/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:93","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monoid.Proto.Float","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:93","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monoid.Proto.Float","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:93","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monoid.Proto.Float","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:94","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid.Proto.Float","id":"empty/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:85","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monoid.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:85","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monoid.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:85","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monoid.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:86","signature":[["sample",[],null]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid.Proto.Function","id":"empty/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:89","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monoid.Proto.Integer","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:89","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monoid.Proto.Integer","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:89","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monoid.Proto.Integer","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:90","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid.Proto.Integer","id":"empty/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:101","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monoid.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:101","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monoid.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:101","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monoid.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:102","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid.Proto.List","id":"empty/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:105","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monoid.Proto.Map","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:105","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monoid.Proto.Map","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:105","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monoid.Proto.Map","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:106","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid.Proto.Map","id":"empty/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:109","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Monoid.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:109","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Monoid.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/monoid.ex:109","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Monoid.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/monoid.ex:114","signature":[["_",[],"Elixir"]],"object_type":"FunctionObject","name":"empty","module_id":"Witchcraft.Monoid.Proto.Tuple","id":"empty/1","doc":null,"arity":1},{"type":"def","source":"lib/witchcraft/ord.ex:154","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"<","module_id":"Witchcraft.Ord","id":"</2","doc":"See `Witchcraft.Ord.lesser?/2`.","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:156","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"<=","module_id":"Witchcraft.Ord","id":"<=/2","doc":"Determine if an element is `:lesser` or `:equal` to another\n\n## Examples\n\n    iex> use Witchcraft.Ord\n    ...> 1 <= 2\n    true\n    ...> [] <= [1, 2, 3]\n    false\n    ...> [1] <= [1, 2, 3]\n    true\n    ...> [4] <= [1, 2, 3]\n    false\n\n","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:137","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":">","module_id":"Witchcraft.Ord","id":">/2","doc":"See `Witchcraft.Ord.greater?/2`.","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:176","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":">=","module_id":"Witchcraft.Ord","id":">=/2","doc":"Determine if an element is `:greater` or `:equal` to another\n\n## Examples\n\n    iex> use Witchcraft.Ord\n    ...> 2 >= 1\n    true\n    ...> [1, 2, 3] >= []\n    true\n    ...> [1, 2, 3] >= [1]\n    true\n    ...> [1, 2, 3] >= [4]\n    false\n\n","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Ord","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord.ex:49","signature":[["ord_a",[],null],["ord_b",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"Witchcraft.Ord","id":"compare/2","doc":"Get the ordering relationship between two elements.\n\nPossible results are `:lesser`, `:equal`, and `:greater`\n\n## Examples\n\n    iex> compare(1, 1)\n    :equal\n\n    iex> compare([1], [2])\n    :lesser\n\n    iex> compare([1, 2], [3])\n    :lesser\n\n    iex> compare([3, 2, 1], [1, 2, 3, 4, 5])\n    :greater\n\n","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:107","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"equal?","module_id":"Witchcraft.Ord","id":"equal?/2","doc":"Determine if two elements are `:equal`\n\n## Examples\n\n    iex> equal?(1, 1.0)\n    true\n\n    iex> equal?(1, 2)\n    false\n\n","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:122","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"greater?","module_id":"Witchcraft.Ord","id":"greater?/2","doc":"Determine if an element is `:greater` than another\n\n## Examples\n\n    iex> greater?(1, 1)\n    false\n\n    iex> greater?(1.1, 1)\n    true\n\n","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:139","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"lesser?","module_id":"Witchcraft.Ord","id":"lesser?/2","doc":"Determine if an element is `:lesser` than another\n\n## Examples\n\n    iex> lesser?(1, 1)\n    false\n\n    iex> lesser?(1, 1.1)\n    true\n\n","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Ord.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord.ex:49","signature":[["ord_a",[],null],["ord_b",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"Witchcraft.Ord.Proto","id":"compare/2","doc":"Get the ordering relationship between two elements.\n\nPossible results are `:lesser`, `:equal`, and `:greater`\n\n## Examples\n\n    iex> compare(1, 1)\n    :equal\n\n    iex> compare([1], [2])\n    :lesser\n\n    iex> compare([1, 2], [3])\n    :lesser\n\n    iex> compare([3, 2, 1], [1, 2, 3, 4, 5])\n    :greater\n\n","arity":2},{"type":"def","source":"lib/witchcraft/ord.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Ord.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Ord.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord/string.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Ord.Proto.BitString","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/string.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Ord.Proto.BitString","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/string.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Ord.Proto.BitString","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord/string.ex:4","signature":[["string_a",[],null],["string_b",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"Witchcraft.Ord.Proto.BitString","id":"compare/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/ord/float.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Ord.Proto.Float","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/float.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Ord.Proto.Float","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/float.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Ord.Proto.Float","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord/float.ex:4","signature":[["float_a",[],null],["float_b",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"Witchcraft.Ord.Proto.Float","id":"compare/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/ord/integer.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Ord.Proto.Integer","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/integer.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Ord.Proto.Integer","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/integer.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Ord.Proto.Integer","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord/integer.ex:4","signature":[["int_a",[],null],["int_b",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"Witchcraft.Ord.Proto.Integer","id":"compare/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/ord/list.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Ord.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/list.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Ord.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/list.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Ord.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord/list.ex:15","signature":[["arg1",[],"Elixir"],["b",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"Witchcraft.Ord.Proto.List","id":"compare/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/ord/map.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Ord.Proto.Map","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/map.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Ord.Proto.Map","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/map.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Ord.Proto.Map","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord/map.ex:18","signature":[["map_a",[],null],["map_b",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"Witchcraft.Ord.Proto.Map","id":"compare/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/ord/tuple.ex:3","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Ord.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/tuple.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Ord.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/ord/tuple.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Ord.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/ord/tuple.ex:12","signature":[["tuple_a",[],null],["tuple_b",[],null]],"object_type":"FunctionObject","name":"compare","module_id":"Witchcraft.Ord.Proto.Tuple","id":"compare/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:84","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"<>","module_id":"Witchcraft.Semigroup","id":"<>/2","doc":"See `Witchcraft.Semigroup.append/2`.","arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Semigroup","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:46","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup","id":"append/2","doc":"`append`enate two data of the same type. Can be chained an arbitrary number of times.\nThese can be chained together an arbitrary number of times. For example:\n\n    iex> 1 |> append(2) |> append(3)\n    6\n\n    iex> [1, 2, 3]\n    ...> |> append([4, 5, 6])\n    ...> |> append([7, 8, 9])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    iex> \"foo\" |> append(\" \") |> append(\"bar\")\n    \"foo bar\"\n\n## Operator\n\n    iex> use Witchcraft.Semigroup\n    ...> 1 <> 2 <> 3 <> 5 <> 7\n    18\n\n    iex> use Witchcraft.Semigroup\n    ...> [1, 2, 3] <> [4, 5, 6] <> [7, 8, 9]\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    iex> use Witchcraft.Semigroup\n    ...> \"foo\" <> \" \" <> \"bar\"\n    \"foo bar\"\n\nThere is an operator alias `a <> b`. Since this conflicts with `Kernel.<>/2`,\n`use Witchcraft,Semigroup` will automatically exclude the Kernel operator.\nThis is highly recommended, since `<>` behaves the same on bitstrings, but is\nnow available on more datatypes.\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:86","signature":[["semigroup_of_lists",[],null]],"object_type":"FunctionObject","name":"concat","module_id":"Witchcraft.Semigroup","id":"concat/1","doc":"Flatten a list of homogeneous semigroups to a single container\n\n## Example\n\n    iex> concat [\n    ...>   [1, 2, 3],\n    ...>   [4, 5, 6]\n    ...> ]\n    [1, 2, 3, 4, 5, 6]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:103","signature":[["to_repeat",[],null],["list",[],"Elixir"]],"object_type":"FunctionObject","name":"repeat","module_id":"Witchcraft.Semigroup","id":"repeat/2","doc":"Repeat the contents of a semigroup a certain number of times\n\n## Examples\n\n    iex> [1, 2, 3] |> repeat(times: 3)\n    [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Semigroup.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:46","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup.Proto","id":"append/2","doc":"`append`enate two data of the same type. Can be chained an arbitrary number of times.\nThese can be chained together an arbitrary number of times. For example:\n\n    iex> 1 |> append(2) |> append(3)\n    6\n\n    iex> [1, 2, 3]\n    ...> |> append([4, 5, 6])\n    ...> |> append([7, 8, 9])\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    iex> \"foo\" |> append(\" \") |> append(\"bar\")\n    \"foo bar\"\n\n## Operator\n\n    iex> use Witchcraft.Semigroup\n    ...> 1 <> 2 <> 3 <> 5 <> 7\n    18\n\n    iex> use Witchcraft.Semigroup\n    ...> [1, 2, 3] <> [4, 5, 6] <> [7, 8, 9]\n    [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n    iex> use Witchcraft.Semigroup\n    ...> \"foo\" <> \" \" <> \"bar\"\n    \"foo bar\"\n\nThere is an operator alias `a <> b`. Since this conflicts with `Kernel.<>/2`,\n`use Witchcraft,Semigroup` will automatically exclude the Kernel operator.\nThis is highly recommended, since `<>` behaves the same on bitstrings, but is\nnow available on more datatypes.\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Semigroup.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Semigroup.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:147","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Semigroup.Proto.BitString","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:147","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Semigroup.Proto.BitString","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:147","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Semigroup.Proto.BitString","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:148","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup.Proto.BitString","id":"append/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:143","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Semigroup.Proto.Float","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:143","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Semigroup.Proto.Float","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:143","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Semigroup.Proto.Float","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:144","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup.Proto.Float","id":"append/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:135","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Semigroup.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:135","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Semigroup.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:135","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Semigroup.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:136","signature":[["f",[],null],["g",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup.Proto.Function","id":"append/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:139","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Semigroup.Proto.Integer","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:139","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Semigroup.Proto.Integer","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:139","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Semigroup.Proto.Integer","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:140","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup.Proto.Integer","id":"append/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:151","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Semigroup.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:151","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Semigroup.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:151","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Semigroup.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:152","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup.Proto.List","id":"append/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:155","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Semigroup.Proto.Map","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:155","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Semigroup.Proto.Map","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:155","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Semigroup.Proto.Map","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:156","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup.Proto.Map","id":"append/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroup.ex:159","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Semigroup.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:159","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Semigroup.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroup.ex:159","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Semigroup.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroup.ex:167","signature":[["tuple_a",[],null],["tuple_b",[],null]],"object_type":"FunctionObject","name":"append","module_id":"Witchcraft.Semigroup.Proto.Tuple","id":"append/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:96","signature":[["g",[],null],["f",[],null]],"object_type":"FunctionObject","name":"<|>","module_id":"Witchcraft.Semigroupoid","id":"<|>/2","doc":"Composition operator \"the math way\"\n\n## Examples\n\n    iex> times_ten_plus_one =\n    ...>       fn x -> x + 1  end\n    ...>   <|> fn y -> y * 10 end\n    ...>\n    ...> times_ten_plus_one.(5)\n    51\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:112","signature":[["f",[],null],["g",[],null]],"object_type":"FunctionObject","name":"<~>","module_id":"Witchcraft.Semigroupoid","id":"<~>/2","doc":"Composition operator \"the pipe way\"\n\n## Examples\n\n    iex> times_ten_plus_one =\n    ...>       fn y -> y * 10 end\n    ...>   <~> fn x -> x + 1  end\n    ...>\n    ...> times_ten_plus_one.(5)\n    51\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Semigroupoid","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:50","signature":[["morphism",[],null],["arguments",[],null]],"object_type":"FunctionObject","name":"apply","module_id":"Witchcraft.Semigroupoid","id":"apply/2","doc":"Express how to apply arguments to the _very end_ of a semigroupoid,\nor \"run the morphism\". This should not be used to inject values part way\nthough a composition chain.\n\nIt is provided here to remain idiomatic with Elixir, and to make\nprop testing _possible_.\n\n## Examples\n\n    iex> Witchcraft.Semigroupoid.apply(&inspect/1, [42])\n    \"42\"\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:37","signature":[["morphism_a",[],null],["morphism_b",[],null]],"object_type":"FunctionObject","name":"compose","module_id":"Witchcraft.Semigroupoid","id":"compose/2","doc":"Take some value and return it again\n\n## Examples\n\n    iex> times_ten_plus_one = compose(fn x -> x + 1 end, fn y -> y * 10 end)\n    ...> times_ten_plus_one.(5)\n    51\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:68","signature":[["data",[],null],["fun",[],null]],"object_type":"FunctionObject","name":"pipe","module_id":"Witchcraft.Semigroupoid","id":"pipe/2","doc":"Pipe some data through a morphism.\n\nSimilar to `apply/2`, but with a single argument, not needing to wrap\nthe argument in a list.\n\n## Examples\n\n    iex> pipe(42, &(&1 + 1))\n    43\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:83","signature":[["b",[],null],["a",[],null]],"object_type":"FunctionObject","name":"pipe_compose","module_id":"Witchcraft.Semigroupoid","id":"pipe_compose/2","doc":"`Compose`, but with the arguments flipped (same direction as `|>`)\n\n## Examples\n\n    iex> times_ten_plus_one = pipe_compose(fn y -> y * 10 end, fn x -> x + 1 end)\n    ...> times_ten_plus_one.(5)\n    51\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Semigroupoid.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:50","signature":[["morphism",[],null],["arguments",[],null]],"object_type":"FunctionObject","name":"apply","module_id":"Witchcraft.Semigroupoid.Proto","id":"apply/2","doc":"Express how to apply arguments to the _very end_ of a semigroupoid,\nor \"run the morphism\". This should not be used to inject values part way\nthough a composition chain.\n\nIt is provided here to remain idiomatic with Elixir, and to make\nprop testing _possible_.\n\n## Examples\n\n    iex> Witchcraft.Semigroupoid.apply(&inspect/1, [42])\n    \"42\"\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:37","signature":[["morphism_a",[],null],["morphism_b",[],null]],"object_type":"FunctionObject","name":"compose","module_id":"Witchcraft.Semigroupoid.Proto","id":"compose/2","doc":"Take some value and return it again\n\n## Examples\n\n    iex> times_ten_plus_one = compose(fn x -> x + 1 end, fn y -> y * 10 end)\n    ...> times_ten_plus_one.(5)\n    51\n\n","arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Semigroupoid.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Semigroupoid.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:142","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Semigroupoid.Proto.Function","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:142","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Semigroupoid.Proto.Function","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:142","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Semigroupoid.Proto.Function","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:143","signature":[["fun",[],null],["args",[],null]],"object_type":"FunctionObject","name":"apply","module_id":"Witchcraft.Semigroupoid.Proto.Function","id":"apply/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/semigroupoid.ex:144","signature":[["fun_a",[],null],["fun_b",[],null]],"object_type":"FunctionObject","name":"compose","module_id":"Witchcraft.Semigroupoid.Proto.Function","id":"compose/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:88","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"!=","module_id":"Witchcraft.Setoid","id":"!=/2","doc":"See `Witchcraft.Setoid.nonequivalent?/2`.","arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:74","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"==","module_id":"Witchcraft.Setoid","id":"==/2","doc":"See `Witchcraft.Setoid.equivalent?/2`.","arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Setoid","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:42","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid","id":"equivalent?/2","doc":"Compare two setoids and determine if they are equivalent\n\nAliased as `==`\n\n## Examples\n\n    iex> equivalent?(1, 2)\n    false\n\n    iex> import Kernel, except: [==: 2, !=: 2]\n    ...> %{a: 1} == %{a: 1, b: 2}\n    false\n\n    equivalent?(%Maybe.Just{just: 42}, %Maybe.Nothing{})\n    #=> false\n\n### Equivalence not equality\n\n    baby_harry = %Wizard{name: \"Harry Potter\", age: 10}\n    old_harry  = %Wizard{name: \"Harry Potter\", age: 17}\n\n    def chosen_one?(some_wizard), do: equivalent?(baby_harry, some_wizard)\n\n    chosen_one?(old_harry)\n    #=> true\n\n","arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:76","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"nonequivalent?","module_id":"Witchcraft.Setoid","id":"nonequivalent?/2","doc":"The opposite of `equivalent?/2`\n\n## Examples\n\n    iex> nonequivalent?(1, 2)\n    true\n\n","arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Setoid.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:42","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid.Proto","id":"equivalent?/2","doc":"Compare two setoids and determine if they are equivalent\n\nAliased as `==`\n\n## Examples\n\n    iex> equivalent?(1, 2)\n    false\n\n    iex> import Kernel, except: [==: 2, !=: 2]\n    ...> %{a: 1} == %{a: 1, b: 2}\n    false\n\n    equivalent?(%Maybe.Just{just: 42}, %Maybe.Nothing{})\n    #=> false\n\n### Equivalence not equality\n\n    baby_harry = %Wizard{name: \"Harry Potter\", age: 10}\n    old_harry  = %Wizard{name: \"Harry Potter\", age: 17}\n\n    def chosen_one?(some_wizard), do: equivalent?(baby_harry, some_wizard)\n\n    chosen_one?(old_harry)\n    #=> true\n\n","arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Setoid.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Setoid.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:118","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Setoid.Proto.BitString","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:118","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Setoid.Proto.BitString","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:118","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Setoid.Proto.BitString","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:119","signature":[["string_a",[],null],["string_b",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid.Proto.BitString","id":"equivalent?/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:114","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Setoid.Proto.Float","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:114","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Setoid.Proto.Float","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:114","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Setoid.Proto.Float","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:115","signature":[["float",[],null],["num",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid.Proto.Float","id":"equivalent?/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:110","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Setoid.Proto.Integer","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:110","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Setoid.Proto.Integer","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:110","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Setoid.Proto.Integer","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:111","signature":[["int",[],null],["num",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid.Proto.Integer","id":"equivalent?/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:126","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Setoid.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:126","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Setoid.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:126","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Setoid.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:127","signature":[["list_a",[],null],["list_b",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid.Proto.List","id":"equivalent?/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:130","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Setoid.Proto.Map","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:130","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Setoid.Proto.Map","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:130","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Setoid.Proto.Map","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:131","signature":[["map_a",[],null],["map_b",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid.Proto.Map","id":"equivalent?/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:134","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Setoid.Proto.MapSet","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:134","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Setoid.Proto.MapSet","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:134","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Setoid.Proto.MapSet","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:135","signature":[["a",[],null],["b",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid.Proto.MapSet","id":"equivalent?/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/setoid.ex:122","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Setoid.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:122","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Setoid.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/setoid.ex:122","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Setoid.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/setoid.ex:123","signature":[["tuple_a",[],null],["tuple_b",[],null]],"object_type":"FunctionObject","name":"equivalent?","module_id":"Witchcraft.Setoid.Proto.Tuple","id":"equivalent?/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/traversable.ex:3","signature":[],"object_type":"FunctionObject","name":"__force_type_class__","module_id":"Witchcraft.Traversable","id":"__force_type_class__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/traversable.ex:250","signature":[["traversable",[],null]],"object_type":"FunctionObject","name":"sequence","module_id":"Witchcraft.Traversable","id":"sequence/1","doc":"Run each action/effect in sequence (from left to right),\nand accumulate values along the way.\n\n## Examples\n\n    iex> sequence([{1, 2, 3}, {4, 5, 6}])\n    {5, 7, [3, 6]}\n\n    iex> [\n    ...>   [1, 2, 3],\n    ...>   [4, 5, 6]\n    ...> ]\n    ...> |> sequence()\n    [\n      [1, 4],\n      [1, 5],\n      [1, 6],\n      [2, 4],\n      [2, 5],\n      [2, 6],\n      [3, 4],\n      [3, 5],\n      [3, 6]\n    ]\n\n","arity":1},{"type":"def","source":"lib/witchcraft/traversable.ex:224","signature":[["link",[],null],["traversable",[],null]],"object_type":"FunctionObject","name":"then_through","module_id":"Witchcraft.Traversable","id":"then_through/2","doc":"The same as `then_traverse`, but with the arguments flipped.\n\n## Examples\n\n    iex> fn x -> [x, x * 5, x * 10] end\n    ...> |> then_through([1, 2, 3])\n    [\n        #\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        #\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        #\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{}\n    ]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/traversable.ex:192","signature":[["traversable",[],null],["link",[],null]],"object_type":"FunctionObject","name":"then_traverse","module_id":"Witchcraft.Traversable","id":"then_traverse/2","doc":"`traverse` actions over data, but ignore the results.\n\n## Examples\n\n    iex> [1, 2, 3]\n    ...> |> then_traverse(fn x -> [x, x * 5, x * 10] end)\n    [\n        #\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        #\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        #\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{},\n        %Witchcraft.Unit{}, %Witchcraft.Unit{}, %Witchcraft.Unit{}\n    ]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/traversable.ex:154","signature":[["link",[],null],["traversable",[],null]],"object_type":"FunctionObject","name":"through","module_id":"Witchcraft.Traversable","id":"through/2","doc":"`traverse/2` with arguments reversed.\n\n## Examples\n\n    iex> fn x -> {x, x * 2, x * 10} end |> through([1, 2, 3])\n    {6, 12, [10, 20, 30]}\n\n    iex> fn x -> [x] end |> through({1, 2, 3})\n    [{1, 2, 3}]\n\n    iex> fn x -> [x, x * 5, x * 10] end |> through({1, 2, 3})\n    [\n      {1, 2, 3},\n      {1, 2, 15},\n      {1, 2, 30}\n    ]\n\n    iex> fn x -> [x, x * 5, x * 10] end |> through([1, 2, 3])\n    [\n      #\n      [1, 2,  3], [1, 2,  15], [1, 2,  30],\n      [1, 10, 3], [1, 10, 15], [1, 10, 30],\n      [1, 20, 3], [1, 20, 15], [1, 20, 30],\n      #\n      [5, 2,  3], [5, 2,  15], [5, 2,  30],\n      [5, 10, 3], [5, 10, 15], [5, 10, 30],\n      [5, 20, 3], [5, 20, 15], [5, 20, 30],\n      #\n      [10, 2,  3], [10, 2,  15], [10, 2,  30],\n      [10, 10, 3], [10, 10, 15], [10, 10, 30],\n      [10, 20, 3], [10, 20, 15], [10, 20, 30]\n    ]\n\n","arity":2},{"type":"def","source":"lib/witchcraft/traversable.ex:45","signature":[["data",[],null],["link",[],null]],"object_type":"FunctionObject","name":"traverse","module_id":"Witchcraft.Traversable","id":"traverse/2","doc":"Convert elements to actions, and then evaluate the actions from left-to-right,\nand accumulate the results.\n\nFor a version without accumulation, see `then_traverse/2`.\n\n## Examples\n\n    iex> traverse([1, 2, 3], fn x -> {x, x * 2, x * 10} end)\n    {6, 12, [10, 20, 30]}\n\n    iex> traverse({1, 2, 3}, fn x -> [x] end)\n    [{1, 2, 3}]\n\n    iex> traverse({1, 2, 3}, fn x -> [x, x * 5, x * 10] end)\n    [\n      {1, 2, 3},\n      {1, 2, 15},\n      {1, 2, 30}\n    ]\n\n    iex> traverse([1, 2, 3], fn x -> [x, x * 5, x * 10] end)\n    [\n      #\n      [1, 2,  3], [1, 2,  15], [1, 2,  30],\n      [1, 10, 3], [1, 10, 15], [1, 10, 30],\n      [1, 20, 3], [1, 20, 15], [1, 20, 30],\n      #\n      [5, 2,  3], [5, 2,  15], [5, 2,  30],\n      [5, 10, 3], [5, 10, 15], [5, 10, 30],\n      [5, 20, 3], [5, 20, 15], [5, 20, 30],\n      #\n      [10, 2,  3], [10, 2,  15], [10, 2,  30],\n      [10, 10, 3], [10, 10, 15], [10, 10, 30],\n      [10, 20, 3], [10, 20, 15], [10, 20, 30]\n    ]\n\n    traverse([1, 2, 3], fn x -> %Algae.Maybe.Just{just: x} end)\n    #=> %Algae.Maybe.Just{just: [1, 2, 3]}\n\n    traverse(%Algae.Maybe.Just{just: 4}, fn x -> [x, x * 10] end)\n    #=> [\n    #     %Algae.Maybe.Just{just: 4},\n    #     %Algae.Maybe.Just{just: 40}\n    #   ]\n\n    traverse([1, 2, 3], fn x ->\n      if is_even(x) do\n        %Algae.Maybe.Just{just: x}\n      else\n        %Algae.Maybe.Nothing{}\n      end\n    end)\n    #=> %Algae.Maybe.Nothing{}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/traversable.ex:3","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__protocol__","module_id":"Witchcraft.Traversable.Proto","id":"__protocol__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/traversable.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for","module_id":"Witchcraft.Traversable.Proto","id":"impl_for/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/traversable.ex:3","signature":[["data",[],null]],"object_type":"FunctionObject","name":"impl_for!","module_id":"Witchcraft.Traversable.Proto","id":"impl_for!/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/traversable.ex:45","signature":[["data",[],null],["link",[],null]],"object_type":"FunctionObject","name":"traverse","module_id":"Witchcraft.Traversable.Proto","id":"traverse/2","doc":"Convert elements to actions, and then evaluate the actions from left-to-right,\nand accumulate the results.\n\nFor a version without accumulation, see `then_traverse/2`.\n\n## Examples\n\n    iex> traverse([1, 2, 3], fn x -> {x, x * 2, x * 10} end)\n    {6, 12, [10, 20, 30]}\n\n    iex> traverse({1, 2, 3}, fn x -> [x] end)\n    [{1, 2, 3}]\n\n    iex> traverse({1, 2, 3}, fn x -> [x, x * 5, x * 10] end)\n    [\n      {1, 2, 3},\n      {1, 2, 15},\n      {1, 2, 30}\n    ]\n\n    iex> traverse([1, 2, 3], fn x -> [x, x * 5, x * 10] end)\n    [\n      #\n      [1, 2,  3], [1, 2,  15], [1, 2,  30],\n      [1, 10, 3], [1, 10, 15], [1, 10, 30],\n      [1, 20, 3], [1, 20, 15], [1, 20, 30],\n      #\n      [5, 2,  3], [5, 2,  15], [5, 2,  30],\n      [5, 10, 3], [5, 10, 15], [5, 10, 30],\n      [5, 20, 3], [5, 20, 15], [5, 20, 30],\n      #\n      [10, 2,  3], [10, 2,  15], [10, 2,  30],\n      [10, 10, 3], [10, 10, 15], [10, 10, 30],\n      [10, 20, 3], [10, 20, 15], [10, 20, 30]\n    ]\n\n    traverse([1, 2, 3], fn x -> %Algae.Maybe.Just{just: x} end)\n    #=> %Algae.Maybe.Just{just: [1, 2, 3]}\n\n    traverse(%Algae.Maybe.Just{just: 4}, fn x -> [x, x * 10] end)\n    #=> [\n    #     %Algae.Maybe.Just{just: 4},\n    #     %Algae.Maybe.Just{just: 40}\n    #   ]\n\n    traverse([1, 2, 3], fn x ->\n      if is_even(x) do\n        %Algae.Maybe.Just{just: x}\n      else\n        %Algae.Maybe.Nothing{}\n      end\n    end)\n    #=> %Algae.Maybe.Nothing{}\n\n","arity":2},{"type":"def","source":"lib/witchcraft/traversable.ex:294","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Traversable.Proto.List","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/traversable.ex:294","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Traversable.Proto.List","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/traversable.ex:294","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Traversable.Proto.List","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/traversable.ex:298","signature":[["list",[],null],["link",[],null]],"object_type":"FunctionObject","name":"traverse","module_id":"Witchcraft.Traversable.Proto.List","id":"traverse/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/traversable.ex:281","signature":[],"object_type":"FunctionObject","name":"__custom_generator__","module_id":"Witchcraft.Traversable.Proto.Tuple","id":"__custom_generator__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/traversable.ex:281","signature":[],"object_type":"FunctionObject","name":"__force_type_instance__","module_id":"Witchcraft.Traversable.Proto.Tuple","id":"__force_type_instance__/0","doc":false,"arity":0},{"type":"def","source":"lib/witchcraft/traversable.ex:281","signature":[["atom",[],"Elixir"]],"object_type":"FunctionObject","name":"__impl__","module_id":"Witchcraft.Traversable.Proto.Tuple","id":"__impl__/1","doc":false,"arity":1},{"type":"def","source":"lib/witchcraft/traversable.ex:284","signature":[["tuple",[],null],["link",[],null]],"object_type":"FunctionObject","name":"traverse","module_id":"Witchcraft.Traversable.Proto.Tuple","id":"traverse/2","doc":null,"arity":2},{"type":"def","source":"lib/witchcraft/unit.ex:15","signature":[],"object_type":"FunctionObject","name":"new","module_id":"Witchcraft.Unit","id":"new/0","doc":"Helper to summon the singleton `Unit` struct","arity":0}],"language":"elixir","git_repo_url":"https://github.com/expede/witchcraft.git","client_version":"0.5.6","client_name":"inch_ex","branch_name":"experiment","args":[]}